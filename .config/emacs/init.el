;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

;; Author: Andrey Orst
;; Keywords: literate programming, Emacs configuration
;; Homepage: https://gitlab.com/andreyorst/dotfiles/-/tree/master/.config/emacs

;;; Commentary:
;; Emacs config.
;; This file was automatically generated by `org-babel-tangle'.
;; Do not change this file.  Main config is located in README.org at `user-emacs-directory'

;;; Code:

(unless (featurep 'early-init)
  (load (expand-file-name "early-init" user-emacs-directory)))

(require 'use-package)

(use-package startup
  :no-require t
  :straight nil
  :custom
  (user-mail-address "andreyorst@gmail.com")
  (user-full-name "Andrey Orst"))

(setq ring-bell-function 'ignore)

(use-package files
  :straight nil
  :custom
  (backup-by-copying t)
  (create-lockfiles nil)
  (backup-directory-alist
   `(("." . ,(expand-file-name ".cache/backups" user-emacs-directory))))
  (auto-save-file-name-transforms
   `((".*" ,(expand-file-name ".cache/auto-save/" user-emacs-directory) t)))
  :config
  (let ((auto-save-dir (expand-file-name ".cache/auto-save/" user-emacs-directory)))
    (unless (file-exists-p auto-save-dir)
      (make-directory auto-save-dir))))

(use-package subr
  :no-require t
  :straight nil
  :init
  (fset 'yes-or-no-p 'y-or-n-p))

(add-hook 'after-init-hook (lambda () (setq echo-keystrokes 5)))

(use-package mwheel
  :straight nil
  :demand
  :bind (("S-<down-mouse-1>" . nil)
         ("S-<mouse-3>" . nil)
         ("<mouse-4>" . mwheel-scroll)
         ("<mouse-5>" . mwheel-scroll))
  :custom
  (mouse-wheel-flip-direction t)
  (mouse-wheel-tilt-scroll t)
  (mouse-wheel-progressive-speed nil)
  :config
  (global-set-key (kbd "<mouse-3>") menu-bar-edit-menu)
  (defun aorst/truncated-lines-p ()
    "Non-nil if any line is longer than `window-width' + `window-hscroll'.
Returns t if any line exceeds right border of the window.  Used
for stopping scrolling scroll from going beyond longest line.
Based on `so-long-detected-long-line-p'."
    (save-excursion
      (goto-char (point-min))
      (let* ((window-width
              ;; this computes a more accurate width rather than `window-width', and respects
              ;; `text-scale-mode' font width.
              (/ (window-body-width nil t) (window-font-width)))
             (hscroll-offset
              ;; `window-hscroll' returns columns that are not affected by `text-scale-mode'.
              ;; Because of that we have to recompute correct `window-hscroll' by multiplying
              ;; it with a non-scaled value, and divide with scaled width value, and round it
              ;; to upper boundary.  Since there's no way to get unscaled value, we have to
              ;; get width of a face that is not scaled by `text-scale-mode', such as
              ;; `window-divider' face.
              (ceiling (/ (* (window-hscroll) (window-font-width nil 'window-divider))
                          (float (window-font-width)))))
             (line-number-width
              ;; compensate line numbers width
              (if (bound-and-true-p display-line-numbers-mode)
                  (- display-line-numbers-width)
                0))
             (threshold (+ window-width hscroll-offset line-number-width -4)))
        (catch 'excessive
           (while (not (eobp))
               (setq start (point))
               (save-restriction
                   (narrow-to-region start (min (+ start 1 threshold)
                                                (point-max)))
                   (forward-line 1))
               (unless (or (bolp)
                           (and (eobp) (<= (- (point) start)
                                           threshold)))
                   (throw 'excessive t)))))))
  (define-advice scroll-left (:around (foo &optional arg set-minimum) aorst:scroll-left)
    (when (and (aorst/truncated-lines-p)
               (not (memq major-mode '(vterm-mode term-mode))))
      (funcall foo arg set-minimum)))
  (setq-default auto-window-vscroll nil
                mouse-highlight nil
                hscroll-step 1
                hscroll-margin 1
                scroll-margin 1
                scroll-step 10)
  (unless (display-graphic-p)
    (xterm-mouse-mode t)))

(setq-default indent-tabs-mode nil)

(use-package cus-edit
  :straight nil
  :custom (custom-file (expand-file-name "custom.el" user-emacs-directory))
  :init (load custom-file :noerror))

(defvar aorst--disabled-commands (expand-file-name "disabled.el" user-emacs-directory)
  "File to store disabled commands, that were enabled permamently.")

(define-advice enable-command (:around (foo command) aorst:put-in-custom-file)
  (let ((user-init-file aorst--disabled-commands))
    (funcall foo command)))

(load aorst--disabled-commands :noerror)

(defgroup aorst ()
  "Various customization options that alter Emacs configuration."
  :tag "Andrey Orst customization options")

(use-package savehist
  :straight nil
  :config (savehist-mode 1))

(use-package mule-cmds
  :no-require t
  :straight nil
  :custom
  (default-input-method 'russian-computer))

(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

(use-package startup
  :no-require t
  :straight nil
  :custom
  (initial-major-mode 'fundamental-mode)
  (initial-scratch-message ""))

(use-package delsel
  :straight nil
  :init
  (delete-selection-mode t))

(use-package simple
  :straight nil
  :bind (("C-w" . aorst/kill-region-or-word)
         ("C-x C-l" . aorst/downcase-region-or-word)
         ("C-x C-u" . aorst/upcase-region-or-word)
         ("C-x C-x" . aorst/exchange-point-and-mark)
         ("C-o" . aorst/newline-below)
         ("C-S-o" . aorst/newline-above)
         ("M-z" . zap-up-to-char)
         ("C-x k" . kill-this-buffer)
         ("M-S-z" . zap-to-char)
         ("<kp-begin>" . ignore)
         ("<kp-5>" . ignore))
  :hook ((before-save . delete-trailing-whitespace)
         (overwrite-mode . aorst/overwrite-set-cursor-shape))
  :custom
  (yank-excluded-properties t "Disable all text properties when yanking.")
  (blink-matching-delay 0)
  (blink-matching-paren 1)
  :init
  (defun aorst/kill-region-or-word (arg)
    (interactive "*p")
    (if (and transient-mark-mode
             mark-active)
        (kill-region (region-beginning) (region-end))
      (backward-kill-word arg)))
  (defun aorst/downcase-region-or-word (arg)
    (interactive "*p")
    (if (and transient-mark-mode
             mark-active)
        (downcase-region (region-beginning) (region-end))
      (downcase-word (- arg))))
  (defun aorst/upcase-region-or-word (arg)
    (interactive "*p")
    (if (and transient-mark-mode
             mark-active)
        (upcase-region (region-beginning) (region-end))
      (upcase-word (- arg))))
  (defun aorst/exchange-point-and-mark (arg)
   (interactive "*p")
   (when (and transient-mark-mode
              mark-active)
     (exchange-point-and-mark)))
  (defun aorst/newline-below ()
    (interactive)
    (end-of-line)
    (newline-and-indent))
  (defun aorst/newline-above ()
    (interactive)
    (back-to-indentation)
    (newline-and-indent)
    (forward-line -1)
    (indent-according-to-mode))
  (defun aorst/overwrite-set-cursor-shape ()
    (when (display-graphic-p)
      (setq cursor-type (if overwrite-mode 'box 'bar)))))

(setq-default truncate-lines t)

(use-package minibuffer
  :straight nil
  :bind (:map minibuffer-inactive-mode-map
         ("<mouse-1>" . ignore)))

(defun aorst/formfeed-line ()
  "Display the formfeed ^L char as comment or as continuous line."
  (unless buffer-display-table
    (setq buffer-display-table (make-display-table)))
  (aset buffer-display-table ?\^L
        (vconcat (make-list (or fill-column 70)
                            (make-glyph-code
                             (string-to-char (or comment-start "-"))
                             'font-lock-comment-face)))))

(dolist (mode-hook '(emacs-lisp-mode-hook
                     help-mode-hook
                     fennel-mode-hook
                     org-mode-hook
                     outline-mode-hook))
  (add-hook mode-hook 'aorst/formfeed-line))

(defun aorst/real-buffer-p (&optional buffer)
  "Determines whether BUFFER is real."
  (not (or (string-match-p
            (regexp-opt '("*Treemacs"
                          "*vterm*"
                          " *Minibuf"
                          " *Echo Area"
                          "*Process List*"
                          "*Ediff"
                          " *LV*"
                          "*Ilist*"))
            (buffer-name buffer))
           (minibufferp))))

(defun aorst/escape ()
  "Quit in current context.

When there is an active minibuffer and we are not inside it close
it.  When we are inside the minibuffer use the regular
`minibuffer-keyboard-quit' which quits any active region before
exiting.  When there is no minibuffer `keyboard-quit' unless we
are defining or executing a macro."
  (interactive)
  (cond ((active-minibuffer-window)
         (if (minibufferp)
             (minibuffer-keyboard-quit)
           (abort-recursive-edit)))
        ((bound-and-true-p iedit-mode)
         (iedit-quit))
        (t
         (unless (or defining-kbd-macro
                     executing-kbd-macro)
           (keyboard-quit)))))
(global-set-key [remap keyboard-quit] #'aorst/escape)

(defun aorst/font-installed-p (font-name)
  "Check if font with FONT-NAME is available."
  (find-font (font-spec :name font-name)))

(defun aorst/indent-buffer ()
  "Indent whole buffer."
  (interactive)
  (save-excursion
    (save-restriction
      (indent-region (point-min) (point-max)))))

(global-set-key (kbd "C-c C-M-f") #'aorst/indent-buffer)

(defun aorst/split-pararagraph-into-lines ()
  "Split current paragraph into lines with one sentence each."
  (interactive)
  (save-excursion
    (let ((fill-column (point-max)))
      (fill-paragraph))
    (let ((auto-fill-p auto-fill-function)
          (end (progn (end-of-line) (backward-sentence) (point))))
      (back-to-indentation)
      (unless (= (point) end)
        (auto-fill-mode -1)
        (while (< (point) end)
          (forward-sentence)
          (delete-horizontal-space)
          (newline-and-indent))
        (deactivate-mark)
        (when auto-fill-p
          (auto-fill-mode t))
        (when (looking-at "^$")
          (backward-delete-char 1))))))

(defun aorst/dark-mode-p ()
  "Check if frame is dark or not."
  (eq 'dark (frame-parameter nil 'background-mode)))

(defun aorst/create-accent-face (face ref-face)
  "Set FACE background to accent color by blending REF-FACE foreground and background.
Depends on `doom-blend'."
  (let ((fg (face-attribute ref-face :foreground))
        (bg (face-attribute ref-face :background)))
    (if (and (stringp fg)
             (stringp bg)
             (fboundp #'doom-blend))
        (set-face-attribute face nil
                            :foreground fg
                            :distant-foreground fg
                            :weight 'bold
                            :background (if (aorst/dark-mode-p)
                                            (doom-blend bg fg 0.8)
                                          (doom-blend bg fg 0.9))
                            :inherit nil
                            :extend t
                            :inverse-video nil)
      (set-face-attribute face nil
                          :foreground nil
                          :distant-foreground nil
                          :background nil
                          :weight 'bold
                          :inherit ref-face
                          :extend t
                          :inverse-video t))))

(defmacro doto (x &rest forms)
  "Evaluates x then calls all of the functions with the value of
x supplied at the front of the given arguments.  The forms are
evaluated in order.  Returns x."
  (declare (indent defun))
  (let ((gx (gensym)))
    `(let ((,gx ,x))
       ,@(mapcar (lambda (f)
                   (if (listp f)
                       `(,(car f) ,gx ,@(cdr f))
                     `(,f ,gx)))
                 forms)
       ,gx)))

(use-package startup
  :no-require t
  :straight nil
  :custom
  (inhibit-splash-screen t))

(use-package menu-bar
  :straight nil
  :config
  (when (not (display-graphic-p))
    (menu-bar-mode -1)))

(defvar aorst--line-pixel-height (line-pixel-height)
  "Line height in pixels.
Used in various places to avoid getting wrong line height when
`text-scale-mode' is active.")

(when window-system
  (setq-default x-gtk-use-system-tooltips nil)
  (setq-default tooltip-x-offset 0)
  (setq-default tooltip-y-offset aorst--line-pixel-height)
  (setq-default tooltip-frame-parameters
                `((name . "tooltip")
                  (internal-border-width . ,(/ aorst--line-pixel-height 2))
                  (border-width . 1)
                  (no-special-glyphs . t)))
  (scroll-bar-mode -1)
  (tool-bar-mode -1))

(when window-system
  (setq-default cursor-type 'bar
                cursor-in-non-selected-windows nil))

(cond ((aorst/font-installed-p "JetBrainsMono")
       (set-face-attribute 'default nil :font "JetBrainsMono 10"))
      ((aorst/font-installed-p "Hack")
       (set-face-attribute 'default nil :font "Hack 10"))
      ((aorst/font-installed-p "Source Code Pro")
       (set-face-attribute 'default nil :font "Source Code Pro 10")))

(when (aorst/font-installed-p "DejaVu Sans")
  (set-face-attribute 'variable-pitch nil :font "DejaVu Sans 10"))

(when (aorst/font-installed-p "JetBrainsMono")
  (dolist (char-ligatures '((?-  . ("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->"))
                            (?/  . ("///" "/=" "/==" "/>" "//")) ;; "/*"
                            (?*  . ("*>" "***" "*/"))
                            (?<  . ("<-" "<<-" "<=>" "<=" "<|" "<||" "<|||" "<|>" "<:" "<>" "<-<"
                                    "<<<" "<==" "<<=" "<=<" "<==>" "<-|" "<<" "<~>" "<=|" "<~~"
                                    "<~" "<$>" "<$" "<+>" "<+" "</>" "</" "<*" "<*>" "<->" "<!--"))
                            (?:  . (":>" ":<" ":::" "::" ":?" ":?>" ":=" "::="))
                            (?=  . ("=>>" "==>" "=/=" "=!=" "=>" "===" "=:=" "=="))
                            (?!  . ("!==" "!!" "!="))
                            (?>  . (">]" ">:" ">>-" ">>=" ">=>" ">>>" ">-" ">="))
                            (?&  . ("&&&" "&&"))
                            (?|  . ("|||>" "||>" "|>" "|]" "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||"))
                            (?.  . (".." ".?" ".=" ".-" "..<" "..."))
                            (?+  . ("+++" "+>" "++"))
                            (?\[ . ("[||]" "[<" "[|"))
                            (?\{ . ("{|"))
                            (?\? . ("??" "?." "?=" "?:"))
                            (?#  . ("##" "###" "####" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#("))
                            (?\; . (";;"))
                            (?_  . ("_|_" "__"))
                            (?~  . ("~~" "~~>" "~>" "~-" "~@"))
                            (?$  . ("$>"))
                            (?^  . ("^="))
                            (?\] . ("]#"))))
    (let* ((char (car char-ligatures))
           (ligatures (cdr char-ligatures))
           (forbidden-chars (string-to-list (apply #'concat ligatures))))
      (set-char-table-range
       composition-function-table
       char `([,(concat (eval `(rx (group (or line-start (not (any ,@forbidden-chars))))))
                        (regexp-opt ligatures)
                        ;; (eval `(rx (group (or (not (any ,@forbidden-chars)) line-end))))
                        )
               1 font-shape-gstring])))))

(use-package composite
  :straight nil
  :hook ((prog-mode
          cider-repl-mode
          inferior-lisp-mode)
         . auto-composition-mode)
  :init (global-auto-composition-mode -1))

(use-package all-the-icons
  :config
  (when (and (not (aorst/font-installed-p "all-the-icons"))
             (window-system))
    (all-the-icons-install-fonts t)))

(use-package solaire-mode
  :straight (:host github
             :repo "hlissner/emacs-solaire-mode")
  :commands (solaire-global-mode
             solaire-mode-swap-bg
             turn-on-solaire-mode
             solaire-mode-in-minibuffer
             solaire-mode-reset)
  :hook (((after-revert
           change-major-mode
           org-src-mode)
          . turn-on-solaire-mode)
         (snippet-mode . solaire-mode))
  :custom
  (solaire-mode-real-buffer-fn #'aorst/real-buffer-p)
  :config
  (solaire-global-mode 1)
  (defun aorst/create-image-with-background-color (args)
    "Specify background color of inline image by modifing ARGS."
    (apply (lambda (file type data-p &rest props)
             (append (list file type data-p)
                     (list :background (face-attribute
                                        (let ((face (cadr (assq 'default face-remapping-alist))))
                                          (if (facep face) face 'default))
                                        :background nil t))
                     props))
           args))
  (advice-add 'create-image :filter-args #'aorst/create-image-with-background-color)
  (defvar aorst--solaire-swap-bg-hook nil
    "Run hooks after solaire swaps backgrounds.")
  (defun aorst/run-solaire-swap-hooks ()
    "Run `aorst--solaire-swap-hook'."
    (run-hooks 'aorst--solaire-swap-bg-hook))
  (advice-add 'solaire-mode--swap-bg-faces-maybe :after #'aorst/run-solaire-swap-hooks))

(use-package doom-themes
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  :custom-face
  (shadow    ((t (:foreground "grey50"))))
  (highlight ((t (:foreground unspecified
                  :distant-foreground unspecified
                  :background unspecified))))
  (org-block ((t (:extend t))))
  (org-block-begin-line ((t (:slant unspecified
                             :background unspecified
                             :inherit org-block
                             :extend t))))
  (org-block-end-line   ((t (:background unspecified
                             :inherit org-block-begin-line
                             :extend t))))
  (secondary-selection  ((t (:foreground unspecified
                             :background unspecified
                             :inherit region
                             :extend t))))
  (org-level-2 ((t (:inherit outline-3))))
  (org-level-3 ((t (:inherit outline-4))))
  (org-level-4 ((t (:inherit outline-2))))
  (org-level-5 ((t (:inherit outline-1))))
  (org-level-6 ((t (:inherit outline-3))))
  (org-level-7 ((t (:inherit outline-4))))
  (org-level-8 ((t (:inherit outline-2))))
  (org-drawer ((t (:foreground nil :inherit font-lock-comment-face))))
  (font-lock-comment-face ((t (:background unspecified))))
  :config
  (if (aorst/dark-mode-p)
      (load-theme 'doom-spacegrey t)
    (load-theme 'doom-one-light t)))

(defvar aorst--theme-change-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")

(define-advice load-theme (:after (&rest _) aorst:load-theme)
  (run-hooks 'aorst--theme-change-hook))

(setq-default custom-safe-themes t)

(setq-default column-number-mode t
              line-number-mode t
              size-indication-mode nil
              mode-line-position nil
              mode-line-percent-position nil
              mode-line-in-non-selected-windows nil)

(dolist (face '(mode-line mode-line-inactive))
  (set-face-attribute face nil
                      :box nil))

(defvar-local aorst--mode-line-buffer-name "")
(defvar-local aorst--modeline-project-cache nil)

(defun aorst/mode-line-update-buffer-name (&rest _)
  (setq aorst--mode-line-buffer-name
        (if-let ((name (buffer-file-name)))
            (concat
             "  "
             (if-let ((project (or aorst--modeline-project-cache (project-current))))
                 (progn (setq-local aorst--modeline-project-cache project)
                        (string-trim-left (abbreviate-file-name name)
                                          (car (project-roots project))))
               (abbreviate-file-name name)))
          "")))

(add-hook 'find-file-hook #'aorst/mode-line-update-buffer-name)
(add-hook 'after-change-major-mode-hook #'aorst/mode-line-update-buffer-name)
(add-hook 'clone-indirect-buffer-hook #'aorst/mode-line-update-buffer-name)
(advice-add #'not-modified :after #'aorst/mode-line-update-buffer-name)
(advice-add #'rename-buffer :after #'aorst/mode-line-update-buffer-name)
(advice-add #'set-visited-file-name :after #'aorst/mode-line-update-buffer-name)
(advice-add #'pop-to-buffer :after #'aorst/mode-line-update-buffer-name)
(advice-add #'undo :after #'aorst/mode-line-update-buffer-name)
(advice-add #'undo-tree-undo-1 :after #'aorst/mode-line-update-buffer-name)
(advice-add #'undo-tree-redo-1 :after #'aorst/mode-line-update-buffer-name)
(advice-add #'fill-paragraph :after #'aorst/mode-line-update-buffer-name)
(advice-add #'popup-create :after #'aorst/mode-line-update-buffer-name)
(advice-add #'popup-delete :after #'aorst/mode-line-update-buffer-name)
(advice-add #'org-edit-src-save :after #'aorst/mode-line-update-buffer-name)
(advice-add #'symbol-overlay-rename :after #'aorst/mode-line-update-buffer-name)

(defsubst aorst/mode-line-buffer-state ()
  (concat (if (and buffer-file-name (buffer-modified-p))
              (concat "  " (propertize (if (char-displayable-p ?💾) "💾" "[*]"
                                           'help-echo (concat (buffer-name) " has unsaved changes"))))
            "")
          (if (or (buffer-narrowed-p)
                  (and (bound-and-true-p fancy-narrow-mode)
                       (fancy-narrow-active-p))
                  (bound-and-true-p dired-narrow-mode))
              (concat "  " (propertize (if (char-displayable-p ?↕) "↕" "[><]"
                                           'help-echo (concat (buffer-name) " is narrowed"))))
            "")
          (if (and buffer-read-only
                   (not (memq major-mode '(vterm-mode
                                           treemacs-mode
                                           xref--xref-buffer-mode
                                           magit-status-mode))))
              (concat "  " (propertize
                            (if (char-displayable-p ?🔒) "🔒" "[RO]")
                            'help-echo "Make file writable"
                            'local-map (doto (make-sparse-keymap)
                                         (define-key [mode-line mouse-1] 'mode-line-toggle-read-only))))
            "")))

(defsubst aorst/mode-line-buffer-encoding ()
  (concat
   "  "
   (propertize
    (let ((sys (coding-system-plist buffer-file-coding-system)))
      (if (memq (plist-get sys :category)
                '(coding-category-undecided coding-category-utf-8))
          "UTF-8"
        (upcase (symbol-name (plist-get sys :name)))))
    'help-echo 'mode-line-mule-info-help-echo
    'local-map mode-line-coding-system-map)))

(defsubst aorst/mode-line-line-column ()
  (concat
   "  "
   (propertize
    "%C:%l"
    'help-echo "goto line"
    'local-map (doto (make-sparse-keymap)
                 (define-key [mode-line mouse-1] #'goto-line)))))

(defsubst aorst/mode-line-line-encoding ()
  (if-let ((eol (pcase (coding-system-eol-type buffer-file-coding-system)
                  (0 "LF")
                  (1 "CRLF")
                  (2 "CR")
                  (_ nil))))
      (concat
       "  "
       (propertize
        eol
        'help-echo (format "Line ending style: %s"
                           (pcase eol
                             ("LF" "Unix style LF")
                             ("CRLF" "DOS style CRLF")
                             ("CR" "Mac style CR")
                             (_ "Undecided")))
        'local-map (doto (make-sparse-keymap)
                     (define-key [mode-line mouse-1] 'mode-line-change-eol))))
    ""))

(defsubst aorst/mode-line-input-method ()
  (if current-input-method
      (concat
       "  "
       (propertize
        current-input-method-title
        'help-echo (concat
                    "Current input method: "
                    current-input-method
                    "\nmouse-2: Disable input method\nmouse-3: Describe current input method")
        'local-map mode-line-input-method-map))
    ""))

(defvar-local aorst--mode-line--current-major-mode nil)

(defvar-local aorst--mode-line--indent-var nil
  "Holds variable that is used for setting indent offset in current major mode.
 Used for both checking if we need to do meaningful work in
 `aorst/mode-line-indent-mode', and for getting updated value.")

(defvar-local aorst--mode-line--indent-var-value nil
  "Holds indent offset value, that was gathered before.
 Used to check if we need to preform meaningful work in
 `aorst/mode-line-indent-mode'.")

(defvar-local aorst--mode-line--indent-mode-string "")

(defun aorst/mode-line-indent-mode ()
  "Compute mode-line string with current indent mode.
 Does heavy work only if major-mode has changed since last call,
 or if current indent offset has changed since last call, or if
 there's no previous result of this function stored."
  (unless (and (eq major-mode aorst--mode-line--current-major-mode)
               (eq aorst--mode-line--indent-var-value
                   (symbol-value aorst--mode-line--indent-var))
               aorst--mode-line--indent-mode-string)
    (setq-local aorst--mode-line--current-major-mode major-mode)
    (setq-local aorst--mode-line--indent-var (aorst/mode-line--get-indent-var))
    (setq-local aorst--mode-line--indent-var-value (symbol-value aorst--mode-line--indent-var))
    (let ((indent-mode-str (concat (when (and (not indent-tabs-mode)
                                              aorst--mode-line--indent-var-value)
                                     (format "%d " aorst--mode-line--indent-var-value))
                                   (if indent-tabs-mode "Tabs" "Spaces"))))
      (setq-local aorst--mode-line--indent-mode-string
                  (concat
                   "  "
                   (propertize
                    indent-mode-str
                    'help-echo (concat "Indent mode: "
                                       indent-mode-str
                                       (when aorst--mode-line--indent-var
                                         (format "\nindent var: %S" aorst--mode-line--indent-var))
                                       "\nmouse-1: toggle indent-"
                                       (if indent-tabs-mode "spaces" "tabs")
                                       "-mode")
                    'local-map (doto (make-sparse-keymap)
                                 (define-key [mode-line mouse-1] 'aorst/toggle-indent-mode)))))))
  aorst--mode-line--indent-mode-string)

(defun aorst/mode-line--get-indent-var ()
  "Get variable that holds indent offset for current major mode.
 Uses `editorconfig-indentation-alist' variable as a source for
 all relationshipts between major modes and their respective
 offset variables."
  (when (boundp 'editorconfig-indentation-alist)
    (car (assoc-default
          major-mode
          editorconfig-indentation-alist
          (lambda (car key)
            (provided-mode-derived-p key car))))))

(defun aorst/toggle-indent-mode ()
  "Toggle `indent-tabs-mode' on and off."
  (interactive)
  (setq-local indent-tabs-mode (not indent-tabs-mode)))

(defvar-local aorst--mode-line-structural "")

(defun aorst/mode-line-structural (&rest _)
  (setq aorst--mode-line-structural
        (if-let ((structural
                  (cond ((bound-and-true-p parinfer-rust-mode)
                         (propertize (concat "Parinfer" (pcase parinfer-rust--mode
                                                          ("smart" "/s")
                                                          ("indent" "/i")
                                                          ("paren" "/p")
                                                          (t "")))
                                     'help-echo (concat "Parinfer " parinfer-rust--mode
                                                        " mode is enabled for current buffer\nmouse-1: toggle Parinfer mode")
                                     'local-map (doto (make-sparse-keymap)
                                                  (define-key [mode-line mouse-1] #'parinfer-rust-toggle-paren-mode))))
                        ((bound-and-true-p paredit-mode)
                         (propertize "Paredit" 'help-echo "Paredit mode is enabled for current buffer"))
                        ((bound-and-true-p smartparens-strict-mode)
                         (propertize "SP/s" 'help-echo "Smartparens mode is enabled for current buffer"))
                        ((bound-and-true-p smartparens-mode)
                         (propertize "SP" 'help-echo "Smartparens mode is enabled for current buffer"))
                        ((bound-and-true-p lispy-mode)
                         (propertize "Lispy" 'help-echo "Lispy mode is enabled for current buffer"))
                        ((bound-and-true-p electric-pair-mode)
                         (propertize "EPM" 'help-echo "Electric Pair mode is enabled for current buffer")))))
            (concat "  " structural)
          "")))

(add-hook 'parinfer-rust-mode-hook #'aorst/mode-line-structural)
(add-variable-watcher 'parinfer-rust--mode #'aorst/mode-line-structural)
(add-hook 'paredit-mode-hook #'aorst/mode-line-structural)
(add-hook 'smartparens-mode-hook #'aorst/mode-line-structural)
(add-hook 'smartparens-strict-mode-hook #'aorst/mode-line-structural)
(add-hook 'lispy-mode-hook #'aorst/mode-line-structural)
(add-hook 'electric-pair-mode-hook #'aorst/mode-line-structural)

(defsubst aorst/mode-line-mode-name ()
  (concat
   "  "
   (propertize
    (format-mode-line mode-name)
    'help-echo (format "Major mode: %s" (format-mode-line mode-name)))))

(defsubst aorst/mode-line-git-branch ()
  (if (and vc-mode buffer-file-name)
      (let* ((str (when vc-display-status
                    (substring
                     vc-mode
                     (+ (if (eq (vc-backend buffer-file-name) 'Hg) 2 3)
                        2)))))
        (when str
          (concat (if (char-displayable-p ?) "   " "  @") str)))
    ""))

(defvar-local aorst--mode-line-lsp "")

(defun aorst/mode-line-update-lsp (&rest _)
  (setq aorst--mode-line-lsp
        (concat "  "
                (if-let ((workspaces (lsp-workspaces)))
                    (propertize "LSP" 'help-echo "LSP Connected")
                  (propertize "LSP" 'help-echo "LSP Disconnected")))))

(add-hook 'lsp-before-initialize-hook #'aorst/mode-line-update-lsp)
(add-hook 'lsp-after-initialize-hook #'aorst/mode-line-update-lsp)
(add-hook 'lsp-after-uninitialized-functions #'aorst/mode-line-update-lsp)
(add-hook 'lsp-before-open-hook #'aorst/mode-line-update-lsp)
(add-hook 'lsp-after-open-hook #'aorst/mode-line-update-lsp)

(defvar-local aorst--mode-line-flycheck "")

(defun aorst/mode-line-update-flycheck (&rest _)
  (setq aorst--mode-line-flycheck
        (if (bound-and-true-p flycheck-mode)
            (concat
             "  "
             (pcase flycheck-last-status-change
               (`not-checked (propertize "-/-" 'help-echo "Flycheck: not checked"))
               (`no-checker (propertize "-" 'help-echo "Flycheck: no checker"))
               (`running (propertize "*/*" 'help-echo "Flycheck: checking"))
               (`errored (propertize "!" 'help-echo "Flycheck: error"))
               (`finished
                (let-alist (flycheck-count-errors flycheck-current-errors)
                  (propertize (format "%s/%s" (or .error 0) (or .warning 0))
                              'help-echo (if (or .error .warning)
                                             (concat "Flycheck: "
                                                     (when .error (format "%d errors%s" .error (if .warning ", " "")))
                                                     (when .warning (format "%d warnings" .warning))
                                                     "\nmouse-1: list errors")
                                           "Flycheck: no errors or warnings")
                              'local-map 'flycheck-error-list-mode-line-map)))
               (`interrupted (propertize "x" 'help-echo "Flycheck: interrupted"))
               (`suspicious (propertize "?" 'help-echo "Flycheck: suspicious"))))
          "")))

(add-hook 'flycheck-status-changed-functions #'aorst/mode-line-update-flycheck)
(add-hook 'flycheck-mode-hook #'aorst/mode-line-update-flycheck)

(defvar-local aorst--mode-line-flymake "")

(defun aorst/flymake-mode-line-update (&rest _)
  (when (bound-and-true-p flymake-mode)
    (let* ((known (hash-table-keys flymake--backend-state))
           (running (flymake-running-backends))
           (disabled (flymake-disabled-backends))
           (reported (flymake-reporting-backends))
           (all-disabled (and disabled (null running)))
           (some-waiting (cl-set-difference running reported)))
      (setq aorst--mode-line-flymake
            (concat
             "  "
             (cond (some-waiting (propertize "*/*" 'help-echo "Flymake: running"))
                   ((null known) (propertize "?"   'help-echo "Flymake: no info"))
                   (all-disabled (propertize "-"   'help-echo "Flymake: disabled"))
                   (t (let ((.error 0) (.warning 0))
                        (progn
                          (cl-loop with warning-level = (warning-numeric-level :warning)
                                   with note-level = (warning-numeric-level :debug)
                                   for state being the hash-values of flymake--backend-state
                                   do (cl-loop with diags = (flymake--backend-state-diags state)
                                               for diag in diags do
                                               (let ((severity (flymake--lookup-type-property
                                                                (flymake--diag-type diag) 'severity
                                                                (warning-numeric-level :error))))
                                                 (cond ((> severity warning-level) (cl-incf .error))
                                                       ((> severity note-level)    (cl-incf .warning))))))
                          (propertize (format "%s/%s" (or .error 0) (or .warning 0))
                                      'help-echo (if (or .error .warning)
                                                     (concat "Flymake: "
                                                             (when .error (format "%d errors%s" .error (if .warning ", " "")))
                                                             (when .warning (format "%d warnings" .warning)))
                                                   "Flymake: no errors or warnings")))))))))))

(advice-add #'flymake--handle-report :after #'aorst/flymake-mode-line-update)
(add-hook 'flymake-mode-hook 'aorst/flymake-mode-line-update)

(defvar mode-line-l-format 'aorst--mode-line-buffer-name)
(defvar mode-line-r-format
  '(concat
    (aorst/mode-line-buffer-state)
    (aorst/mode-line-line-column)
    (aorst/mode-line-input-method)
    (aorst/mode-line-line-encoding)
    (aorst/mode-line-buffer-encoding)
    (aorst/mode-line-indent-mode)
    (aorst/mode-line-mode-name)
    (aorst/mode-line-git-branch)
    aorst--mode-line-lsp
    aorst--mode-line-flymake
    aorst--mode-line-flycheck
    aorst--mode-line-structural))

(setq-default
 mode-line-format
 '(:eval
   (let ((mode-line-l-format (concat " " (string-trim-left (eval mode-line-l-format))))
         (mode-line-r-format (eval mode-line-r-format)))
     (concat mode-line-l-format
             (make-string (- (window-width)
                             (string-width (format-mode-line mode-line-l-format))
                             (string-width (format-mode-line mode-line-r-format)))
                          ?\s)
             mode-line-r-format))))

(use-package mini-modeline
  :straight (:host github
             :repo "kiennq/emacs-mini-modeline")
  :hook (((aorst--theme-change
           aorst--solaire-swap-bg)
          . aorst/mini-modeline-setup-faces)
         (after-init . mini-modeline-mode))
  :custom
  (mini-modeline-right-padding 2)
  (mini-modeline-display-gui-line nil)
  (mini-modeline-l-format
   '(:eval (string-trim-left (eval mode-line-l-format))))
  (mini-modeline-r-format
   '(:eval (eval mode-line-r-format)))
  :config
  (defun aorst/mini-modeline-setup-faces ()
    (setq mini-modeline-face-attr
          (plist-put mini-modeline-face-attr
                     :background (face-attribute 'mode-line :background)))))

(use-package frame
  :straight nil
  :when window-system
  :hook ((aorst--theme-change
          aorst--solaire-swap-bg)
         . aorst/window-divider-setup-faces)
  :custom
  (window-divider-default-bottom-width 1)
  (window-divider-default-right-width 1)
  (window-divider-default-places t)
  :config
  (window-divider-mode t)
  (defun aorst/window-divider-setup-faces ()
    (let* ((color (face-attribute 'mode-line-inactive :background))
           (color (if (fboundp #'doom-darken)
                      (if (aorst/dark-mode-p)
                          (doom-darken color 0.15)
                        (doom-lighten color 0.10)))))
      (set-face-attribute 'window-divider nil :foreground color)))
  (aorst/window-divider-setup-faces))

(setq-default frame-title-format
              '(:eval (let ((match (string-match "[ *]" (buffer-name))))
                        (if (and match (= match 0)) "Emacs" "%b — Emacs"))))

(use-package treemacs
  :when window-system
  :commands (treemacs-follow-mode
             treemacs-filewatch-mode
             treemacs-load-theme)
  :bind (("<f7>" . treemacs)
         ("<f8>" . treemacs-select-window)
         :map treemacs-mode-map
         ([C-tab] . aorst/treemacs-expand-all-projects))
  :hook ((after-init . aorst/treemacs-after-init-setup)
         (treemacs-mode . aorst/after-treemacs-setup)
         (treemacs-switch-workspace . aorst/treemacs-expand-all-projects)
         (treemacs-switch-workspace . treemacs-set-fallback-workspace)
         (treemacs-mode . aorst/treemacs-setup-title)
         ((aorst--theme-change
           aorst--solaire-swap-bg)
          . aorst/treemacs-setup-title)
         ((aorst--theme-change
           aorst--solaire-swap-bg)
          . aorst/treemacs-setup-faces))
  :custom-face
  (treemacs-fringe-indicator-face ((t (:inherit font-lock-doc-face))))
  :custom
  (treemacs-width 32)
  (treemacs-is-never-other-window t)
  (treemacs-space-between-root-nodes nil)
  (treemacs-indentation 2)
  :config
  (use-package treemacs-magit
    :after magit)
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (defun aorst/treemacs-setup-faces ()
    (set-face-attribute 'treemacs-root-face nil
                        :foreground (face-attribute 'default :foreground)
                        :inherit 'treemacs-directory-face
                        :height 1.0
                        :weight 'normal))
  (aorst/treemacs-setup-faces)
  :init
  (defun aorst/treemacs-expand-all-projects (&optional _)
    "Expand all projects."
    (interactive)
    (save-excursion
      (treemacs--forget-last-highlight)
      (dolist (project (treemacs-workspace->projects (treemacs-current-workspace)))
        (-when-let (pos (treemacs-project->position project))
          (when (eq 'root-node-closed (treemacs-button-get pos :state))
            (goto-char pos)
            (treemacs--expand-root-node pos)))))
    (treemacs--maybe-recenter 'on-distance))
  (defun aorst/treemacs-variable-pitch-labels (&rest _)
    (dolist (face '(treemacs-file-face
                    treemacs-tags-face
                    treemacs-directory-face
                    treemacs-directory-collapsed-face
                    treemacs-term-node-face
                    treemacs-help-title-face
                    treemacs-help-column-face
                    treemacs-git-added-face
                    treemacs-git-ignored-face
                    treemacs-git-renamed-face
                    treemacs-git-conflict-face
                    treemacs-git-modified-face
                    treemacs-git-unmodified-face
                    treemacs-git-untracked-face
                    treemacs-root-unreadable-face
                    treemacs-root-remote-face
                    treemacs-root-remote-unreadable-face
                    treemacs-root-remote-disconnected-face
                    treemacs-fringe-indicator-face
                    treemacs-on-failure-pulse-face
                    treemacs-on-success-pulse-face))
      (let ((faces (face-attribute face :inherit nil)))
        (set-face-attribute
         face nil :inherit
         `(variable-pitch ,@(delq 'unspecified (if (listp faces) faces (list faces))))))))
  (defun aorst/treemacs-after-init-setup ()
    "Set treemacs theme, open treemacs, and expand all projects."
    (load-file (expand-file-name "treemacs-atom-theme.el" user-emacs-directory))
    (treemacs-load-theme "Atom")
    (treemacs)
    (treemacs-fringe-indicator-mode -1)
    (aorst/treemacs-expand-all-projects)
    (windmove-right))
  (defun aorst/after-treemacs-setup ()
    "Set treemacs buffer common settings."
    (setq tab-width 1
          mode-line-format nil
          line-spacing 5)
    (setq-local scroll-step 1)
    (setq-local scroll-conservatively 10000)
    (set-window-fringes nil 1 1 nil)
    (aorst/treemacs-variable-pitch-labels))
  (define-advice treemacs-select-window (:after () aorst:treemacs-setup-fringes)
    "Set treemacs buffer fringes."
    (set-window-fringes nil 1 1 t))
  (define-advice treemacs-root-down (:after () aorst:treemacs-root-down)
    "Open all projects on root down"
    (aorst/treemacs-expand-all-projects))
  (defun aorst/treemacs-setup-title ()
    (when-let ((treemacs-buffer (treemacs-get-local-buffer)))
      (with-current-buffer treemacs-buffer
        (let ((bg (face-attribute 'default :background))
              (fg (face-attribute 'default :foreground)))
          (face-remap-add-relative 'header-line
                                   :background bg :foreground fg
                                   :box `(:line-width ,(/ aorst--line-pixel-height 4) :color ,bg)))
        (setq header-line-format
              '((:eval
                 (let* ((text (treemacs-workspace->name (treemacs-current-workspace)))
                        (extra-align (+ (/ (length text) 2) 1))
                        (width (- (/ (window-width) 2) extra-align)))
                   (concat (make-string width ?\s) text)))))))))

(use-package uniquify
  :straight nil
  :custom (uniquify-buffer-name-style 'forward))

(use-package tab-line
  :straight nil
  :when window-system
  :hook ((after-init . global-tab-line-mode)
         ((aorst--theme-change
           aorst--solaire-swap-bg)
          . aorst/tabline-setup-faces))
  :config
  (defun tab-line-close-tab (&optional e)
    "Close the selected tab.

If tab is presented in another window, close the tab by using
`bury-buffer` function.  If tab is unique to all existing
windows, kill the buffer with `kill-buffer` function.  Lastly, if
no tabs left in the window, it is deleted with `delete-window`
function."
    (interactive "e")
    (let* ((posnp (event-start e))
           (window (posn-window posnp))
           (buffer (get-pos-property 1 'tab (car (posn-string posnp)))))
      (with-selected-window window
        (let ((tab-list (tab-line-tabs-window-buffers))
              (buffer-list (flatten-list
                            (seq-reduce (lambda (list window)
                                          (select-window window t)
                                          (cons (tab-line-tabs-window-buffers) list))
                                        (window-list) nil))))
          (select-window window)
          (if (> (seq-count (lambda (b) (eq b buffer)) buffer-list) 1)
              (progn
                (if (eq buffer (current-buffer))
                    (bury-buffer)
                  (set-window-prev-buffers window (assq-delete-all buffer (window-prev-buffers)))
                  (set-window-next-buffers window (delq buffer (window-next-buffers))))
                (unless (cdr tab-list)
                  (ignore-errors (delete-window window))))
            (and (kill-buffer buffer)
                 (unless (cdr tab-list)
                   (ignore-errors (delete-window window)))))))))


  (defun aorst/tab-line-name-buffer (buffer &rest _buffers)
    "Create name for tab with padding and truncation.

If buffer name is shorter than `tab-line-tab-max-width' it gets
centered with spaces, otherwise it is truncated, to preserve
equal width for all tabs.  This function also tries to fit as
many tabs in window as possible, so if there are no room for tabs
with maximum width, it calculates new width for each tab and
truncates text if needed.  Minimal width can be set with
`tab-line-tab-min-width' variable."
    (with-current-buffer buffer
      (let ((buffer (string-trim (buffer-name)))
            (right-pad (if tab-line-close-button-show "" " ")))
        (propertize (concat " " buffer right-pad)
                    'help-echo (when-let ((name (buffer-file-name)))
                                 (abbreviate-file-name name))))))


  (setq tab-line-close-button-show t
        tab-line-new-button-show nil
        tab-line-separator ""
        tab-line-tab-name-function #'aorst/tab-line-name-buffer
        tab-line-right-button (propertize (if (char-displayable-p ?▶) " ▶ " " > ")
                                          'keymap tab-line-right-map
                                          'mouse-face 'tab-line-highlight
                                          'help-echo "Click to scroll right")
        tab-line-left-button (propertize (if (char-displayable-p ?◀) " ◀ " " < ")
                                         'keymap tab-line-left-map
                                         'mouse-face 'tab-line-highlight
                                         'help-echo "Click to scroll left")
        tab-line-close-button (propertize (if (char-displayable-p ?×) " × " " x ")
                                          'keymap tab-line-tab-close-map
                                          'mouse-face 'tab-line-close-highlight
                                          'help-echo "Click to close tab")
        tab-line-exclude-modes '(ediff-mode
                                 process-menu-mode
                                 term-mode
                                 vterm-mode
                                 treemacs-mode
                                 imenu-list-major-mode))


  (defun aorst/tabline-setup-faces ()
    (let ((bg (if (and (facep 'solaire-default-face)
                       (not (eq (face-attribute 'solaire-default-face :background)
                                'unspecified)))
                  (face-attribute 'solaire-default-face :background)
                (face-attribute 'default :background)))
          (fg (face-attribute 'default :foreground))
          (dark-fg (face-attribute 'shadow :foreground))
          (overline (face-attribute 'font-lock-keyword-face :foreground))
          (base (if (and (facep 'solaire-default-face)
                         (not (eq (face-attribute 'solaire-default-face :background)
                                  'unspecified)))
                    (face-attribute 'default :background)
                  (face-attribute 'mode-line :background)))
          (box-width (/ aorst--line-pixel-height 5)))
      (set-face-attribute 'tab-line-tab-special nil
                          :slant 'normal)
      (set-face-attribute 'tab-line nil
                          :background base
                          :foreground dark-fg
                          :height 1.0
                          :inherit nil
                          :overline base
                          :box (when (> box-width 0)
                                 (list :line-width -1 :color base)))
      (set-face-attribute 'tab-line-tab nil
                          :foreground dark-fg
                          :background bg
                          :inherit nil
                          :box (when (> box-width 0)
                                 (list :line-width box-width :color bg)))
      (set-face-attribute 'tab-line-tab-inactive nil
                          :foreground dark-fg
                          :background base
                          :inherit nil
                          :box (when (> box-width 0)
                                 (list :line-width box-width :color base)))
      (set-face-attribute 'tab-line-tab-current nil
                          :foreground fg
                          :background bg
                          :inherit nil
                          :overline overline
                          :box (when (> box-width 0)
                                 (list :line-width box-width :color bg)))))

  (aorst/tabline-setup-faces)

  (define-advice tab-line-select-tab (:after (&optional e) aorst:tab-line-select-tab)
    (select-window (posn-window (event-start e)))))

(use-package display-line-numbers
  :straight nil
  :hook (prog-mode . display-line-numbers-mode)
  :custom
  (display-line-numbers-width 4)
  (display-line-numbers-grow-only t)
  (display-line-numbers-width-start t))

(use-package org
  :straight (:type built-in)
  :hook ((ediff-prepare-buffer . outline-show-all)
         ((org-capture-mode org-src-mode) . aorst/discard-history))
  :bind (:map org-mode-map
         ("M-Q" . aorst/split-pararagraph-into-lines)
         ("C-c l" . org-store-link))
  :custom
  (org-startup-with-inline-images nil)
  (org-tags-column -120)
  (org-startup-folded 'content)
  (org-hide-emphasis-markers t)
  (org-adapt-indentation nil)
  (org-hide-leading-stars t)
  (org-highlight-latex-and-related '(latex))
  (org-preview-latex-default-process 'dvisvgm)
  (org-src-fontify-natively t)
  (org-preview-latex-image-directory ".ltximg/")
  (org-confirm-babel-evaluate nil)
  (org-imenu-depth 8)
  (org-log-done t)
  (org-agenda-files '("~/Tasks"))
  (org-image-actual-width nil)
  :config
  (setq org-format-latex-options
        (plist-put org-format-latex-options
                   :scale
                   (if (executable-find "gsettings")
                       (string-to-number
                        (shell-command-to-string
                         "gsettings get org.gnome.desktop.interface text-scaling-factor"))
                     1.0)))
  (use-package ox-latex
    :straight nil)
  (use-package ox-hugo
    :after ox)
  (when (not (version<= org-version "9.1.9"))
    (use-package org-tempo
      :straight nil))
  (defun aorst/discard-history ()
    "Discard undo history of org src and capture blocks."
    (setq buffer-undo-list nil)
    (set-buffer-modified-p nil))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((gnuplot . t)
     (scheme . t)))
  (defun aorst/org-update-latex-preview-background-color (&rest _)
    (setq-default
     org-format-latex-options
     (plist-put org-format-latex-options
                :background
                (face-attribute (let ((face (cadr (assq 'default face-remapping-alist))))
                                  (if (facep face) face 'default))
                                :background nil t))))
  (add-hook 'solaire-mode-hook #'aorst/org-update-latex-preview-background-color)
  (define-advice org-return (:around (f &optional indent arg interactive) aorst:org-return)
    (let ((org-src-preserve-indentation t))
      (funcall f indent arg interactive)))
  (define-advice org-cycle (:around (f &optional arg) aorst:org-cycle)
    (let ((org-src-preserve-indentation t))
      (funcall f arg))))

(use-package prog-mode
  :straight nil
  :hook (prog-mode . hl-line-mode))

(use-package cc-mode
  :straight nil
  :config (defun aorst/cc-mode-setup ()
            (c-set-offset 'case-label '+)
            (setq c-basic-offset 4
                  c-default-style "linux"
                  indent-tabs-mode t
                  comment-start "//"
                  comment-end ""
                  tab-width 4))
  :hook ((c-mode-common . aorst/cc-mode-setup)))

(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :bind (:map markdown-mode-map
         ("M-Q" . aorst/split-pararagraph-into-lines))
  :custom
  (markdown-fontify-code-blocks-natively t)
  (markdown-command "pandoc")
  :hook ((markdown-mode . flyspell-mode)))

(use-package rust-mode
  :commands (rust-format-buffer)
  :bind (:map rust-mode-map
         ("C-c C-M-f" . rust-format-buffer)))

(use-package racer
  :if (executable-find "racer")
  :hook (racer-mode . eldoc-mode)
  :init (defun org-babel-edit-prep:rust (&optional _babel-info)
          "Run racer mode for Org Babel."
          (racer-mode 1)))

(use-package cargo
  :if (executable-find "cargo")
  :hook ((rust-mode toml-mode) . cargo-minor-mode))

(use-package toml-mode
  :bind (:map toml-mode-map
         ("C-c C-M-f" . aorst/indent-buffer)))

(use-package geiser
  :hook (scheme-mode . geiser-mode)
  :custom
  (geiser-active-implementations '(guile))
  (geiser-default-implementation 'guile))

(use-package racket-mode
  :bind (:map racket-mode-map
         ("C-c C-d" . racket-run-with-debugging)
         ("C-c C-M-f" . aorst/indent-buffer)
         (")" . self-insert-command)
         ("]" . self-insert-command)
         ("}" . self-insert-command))
  :hook (racket-mode . racket-xp-mode)
  :custom (racket-show-functions '(racket-show-echo-area))
  :config
  (set-face-attribute 'racket-debug-break-face nil :background (face-attribute 'error :foreground) :foreground (face-attribute 'default :background))
  (set-face-attribute 'racket-debug-result-face nil :foreground (face-attribute 'font-lock-comment-face :foreground) :box nil)
  (set-face-attribute 'racket-debug-locals-face nil :foreground (face-attribute 'font-lock-comment-face :foreground) :box nil)
  (set-face-attribute 'racket-selfeval-face nil :foreground (face-attribute 'default :foreground)))

(use-package cmake-mode
  :bind (:map cmake-mode-map
         ("C-c C-M-f" . aorst/indent-buffer)))

(use-package elisp-mode
  :straight nil
  :commands aorst/emacs-lisp-indent-function
  :hook ((emacs-lisp-mode . eldoc-mode)
         (emacs-lisp-mode . aorst/emacs-lisp-setup))
  :bind (:map emacs-lisp-mode-map
         ("C-c C-M-f" . aorst/indent-buffer))
  :config
  (defun aorst/emacs-lisp-indent-function (indent-point state)
    "A replacement for `lisp-indent-function'.
Indents plists more sensibly. Adapted from DOOM Emacs:
https://github.com/hlissner/doom-emacs/blob/b03fdabe4fa8a07a7bd74cd02d9413339a485253/modules/lang/emacs-lisp/autoload.el#L91"
    (let ((normal-indent (current-column))
          (orig-point (point))
          target)
      (goto-char (1+ (elt state 1)))
      (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
      (cond ((and (elt state 2)
                  (or (not (looking-at-p "\\sw\\|\\s_"))
                      (eq (char-after) ?:)))
             (unless (> (save-excursion (forward-line 1) (point))
                        calculate-lisp-indent-last-sexp)
               (goto-char calculate-lisp-indent-last-sexp)
               (beginning-of-line)
               (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t))
             (backward-prefix-chars)
             (current-column))
            ((and (save-excursion
                    (goto-char indent-point)
                    (skip-syntax-forward " ")
                    (not (eq (char-after) ?:)))
                  (save-excursion
                    (goto-char orig-point)
                    (and (eq (char-after) ?:)
                         (eq (char-before) ?\()
                         (setq target (current-column)))))
             (save-excursion
               (move-to-column target t)
               target))
            ((let* ((function (buffer-substring (point) (progn (forward-sexp 1) (point))))
                    (method (or (function-get (intern-soft function) 'lisp-indent-function)
                                (get (intern-soft function) 'lisp-indent-hook))))
               (cond ((or (eq method 'defun)
                          (and (null method)
                               (> (length function) 3)
                               (string-match-p "\\`def" function)))
                      (lisp-indent-defform state indent-point))
                     ((integerp method)
                      (lisp-indent-specform method state indent-point normal-indent))
                     (method
                      (funcall method indent-point state))))))))
  (defun aorst/emacs-lisp-setup ()
    (setq-local lisp-indent-function
                #'aorst/emacs-lisp-indent-function))
  (defun org-babel-edit-prep:emacs-lisp (&optional _babel-info)
    "Setup Emacs Lisp buffer for Org Babel."
    (setq lexical-binding t)
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc))))

(use-package yaml-mode
  :custom (yaml-indent-offset 4))

(use-package flycheck-yamllint
  :when (executable-find "yamllint")
  :hook ((yaml-mode . flycheck-yamllint-setup)
         (yaml-mode . flycheck-mode)))

(use-package sh-script
  :straight nil
  :bind (:map sh-mode-map
         ("C-c C-M-f" . aorst/indent-buffer)))

(use-package perl-mode
  :straight nil
  :hook ((perl-mode . flycheck-mode))
  :bind (:map perl-mode-map
         ("C-c C-M-f" . aorst/indent-buffer)))

(use-package clojure-mode
  :hook ((clojure-mode
          clojurec-mode
          clojurescript-mode)
         . aorst/clojure-flycheck-maybe)
  :bind (:map clojure-mode-map
         ("C-c C-M-f" . aorst/indent-buffer))
  :config
  (defun aorst/clojure-flycheck-maybe ()
    (unless (bound-and-true-p lsp-mode)
      (flycheck-mode 1))))

(use-package cider
  :hook (((cider-repl-mode cider-mode) . cider-company-enable-fuzzy-completion)
         ((cider-repl-mode cider-mode) . eldoc-mode))
  :bind (:map cider-repl-mode-map
         ("C-c C-o" . cider-repl-clear-buffer))
  :custom-face
  (cider-result-overlay-face ((t (:box (:line-width -1 :color "grey50")))))
  (cider-error-highlight-face ((t (:inherit flymake-error))))
  (cider-warning-highlight-face ((t (:inherit flymake-warning))))
  :custom
  (nrepl-log-messages nil)
  (cider-repl-display-help-banner nil)
  (cider-repl-tab-command #'company-complete-common-or-cycle)
  (nrepl-hide-special-buffers t)
  (cider-test-show-report-on-success t)
  (cider-allow-jack-in-without-project t)
  (cider-use-fringe-indicators nil)
  (cider-font-lock-dynamically '(macro var))
  :config
  (setq cider-jdk-src-paths nil)
  (when (file-exists-p "/usr/lib/jvm/java-1.8.0-openjdk/src.zip")
    (add-to-list 'cider-jdk-src-paths "/usr/lib/jvm/java-1.8.0-openjdk/src.zip"))
  (when (file-exists-p "/usr/lib/jvm/java-11-openjdk/lib/src.zip")
    (add-to-list 'cider-jdk-src-paths "/usr/lib/jvm/java-11-openjdk/lib/src.zip"))
  (when (file-exists-p "~/.clojure-src/")
    (setq cider-jdk-src-paths
          (append cider-jdk-src-paths
                  (file-expand-wildcards "~/.clojure-src/clojure-*.*.*-sources.jar")))))

(use-package flycheck-clj-kondo
  :when (executable-find "clj-kondo")
  :straight (:host github
             :repo "borkdude/flycheck-clj-kondo"))

(use-package clj-refactor
  :hook ((cider-mode . clj-refactor-mode)
         (cider-mode . yas-minor-mode))
  :custom (cljr-suppress-no-project-warning t)
          (cljr-warn-on-eval nil))

(use-package elein)

(use-package anakondo
  :straight (:host github
             :repo "didibus/anakondo")
  :when (executable-find "clj-kondo")
  :hook
  ((clojure-mode-hook
    clojurescript-mode-hook
    clojurec-mode-hook)
   . anakondo-minor-mode)
  :commands anakondo-minor-mode)

(use-package fennel-mode
  :straight (:host gitlab
             :repo "technomancy/fennel-mode")
  :bind (:map fennel-mode-map
         ("C-c C-M-f" . aorst/indent-buffer))
  :hook (fennel-mode . fennel-mode-setup)
  :config
  (put 'time 'fennel-indent-function 0)
  (put 'dotimes 'fennel-indent-function 1)
  (put 'when-let 'fennel-indent-function 1)
  (put 'if-let 'fennel-indent-function 1)
  (put 'try 'fennel-indent-function 0)
  (put 'catch 'fennel-indent-function 1)
  (put 'finally 'fennel-indent-function 0)
  (defun fennel-mode-setup ()
    "Set common variables."
    (setq-local lisp-doc-string-elt-property 'fennel-doc-string-elt))
  (defvar org-babel-default-header-args:fennel '((:results . "silent")))
  (defun org-babel-execute:fennel (body params)
    "Evaluate a block of Fennel code with Babel."
    (lisp-eval-string body))
  (define-advice fennel-repl (:after (&rest _) aorst:fennel-repl-indent-function)
    (setq-local lisp-indent-function 'fennel-indent-function)))

(use-package lua-mode
  :bind (:map lua-mode-map
         ("C-c C-M-f" . aorst/indent-buffer)))

(use-package css-mode
  :straight nil
  :custom
  (css-indent-offset 2))

(use-package erlang
  :straight t
  :hook (erlang-mode . (lambda ()
                         (add-hook 'xref-backend-functions
                                   #'dumb-jump-xref-activate
                                   nil t))))

(use-package elixir-mode
  :hook (elixir-mode . flycheck-mode)
  :custom-face
  (elixir-atom-face ((t (:foreground unspecified
                         :inherit elixir-attribute-face)))))

(use-package mix
  :hook (elixir-mode . mix-minor-mode))

(use-package inf-elixir
  :straight (:host github
             :repo "J3RN/inf-elixir"))

(use-package json-mode
  :hook (json-mode . flycheck-mode)
  :custom (js-indent-level 2))

(use-package sh-script
  :straight nil
  :hook (sh-mode . flycheck-mode))

(use-package scala-mode)

(use-package sql-indent)

(use-package help
  :straight nil
  :custom (help-window-select t))

(use-package doc-view
  :straight nil
  :custom (doc-view-resolution 192))

(setq use-package-hook-name-suffix "-functions")
(use-package vterm
  :if (bound-and-true-p module-file-suffix)
  :bind (("C-`" . aorst/vterm-toggle)
         ("C-t" . aorst/vterm-focus)
         :map vterm-mode-map
         ("<insert>" . ignore))
  :hook (vterm-exit . aorst/kill-vterm)
  :custom (vterm-always-compile-module t)
  :config
  (defun aorst/vterm-toggle (&optional arg)
    "Toggle `vterm' window on and off with the same command."
    (interactive "P")
    (let* ((directory (if default-directory
                          default-directory
                        (expand-file-name "~/")))
           (bufname " *vterm*")
           (window (get-buffer-window bufname)))
      (if window
          (ignore-errors (delete-window window))
        (if (window-dedicated-p)
            (let ((windows (seq-drop-while #'window-dedicated-p (window-list))))
              (when (not (null windows))
                (select-window (car windows)))))
        (let* ((win-side (unless (string= (buffer-name) " *Install vterm* ")
                           (if (symbolp arg)
                               (cons (split-window-below (floor (* (window-height) 0.65))) 'bot)
                             (cons (split-window-right) 'right))))
               (window (car win-side))
               (side (cdr win-side)))
          (when window
            (select-window window))
          (cond ((get-buffer bufname)
                 (switch-to-buffer bufname)
                 ;; for `bury-buffer' to work we need a non-hidden buffer
                 (rename-buffer "*vterm*"))
                (t (let ((default-directory directory))
                     (vterm "*vterm*"))))
          (when (bound-and-true-p global-tab-line-mode)
            (previous-buffer)
            (bury-buffer))
          (rename-buffer " *vterm*")
          (set-window-dedicated-p window t)
          (set-window-parameter window 'no-delete-other-windows t)
          (when side
            (set-window-parameter window 'window-side side))
          (set-window-parameter window 'no-other-window t)))))
  (defun aorst/vterm-focus (&optional arg)
    "Focus `vterm' or open one if there's none."
    (interactive "P")
    (let ((window (get-buffer-window " *vterm*")))
      (if window
          (select-window window)
        (aorst/vterm-toggle arg))))
  (defun aorst/kill-vterm (buf &optional event)
    "Kill the `*vterm*' buffer after shell exits."
    (when buf (kill-buffer buf))))
(setq use-package-hook-name-suffix "-hook")

(use-package editorconfig
  :config (editorconfig-mode 1))

(use-package flymake
  :straight nil
  :custom
  (flymake-fringe-indicator-position 'right-fringe))

(use-package flycheck
  :bind (:map flycheck-mode-map
         ("C-c ! C-h" . hydrant/flycheck/body))
  :custom
  (flycheck-indication-mode 'right-fringe)
  (flycheck-display-errors-delay 86400 "86400 seconds is 1 day")
  :config
  (when (fboundp #'define-fringe-bitmap)
    (define-fringe-bitmap 'flycheck-double-exclamation-mark
      (vector #b00000000
              #b00000000
              #b00000000
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b00000000
              #b01100110
              #b01100110
              #b00000000
              #b00000000
              #b00000000))
    (define-fringe-bitmap 'flycheck-exclamation-mark
      (vector #b00000000
              #b00000000
              #b00000000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00000000
              #b00011000
              #b00011000
              #b00000000
              #b00000000
              #b00000000))
    (define-fringe-bitmap 'flycheck-question-mark
      (vector #b00000000
              #b00000000
              #b00000000
              #b00111100
              #b01111110
              #b01100110
              #b01100110
              #b00000110
              #b00001100
              #b00011000
              #b00011000
              #b00000000
              #b00011000
              #b00011000
              #b00000000
              #b00000000
              #b00000000))
    (flycheck-define-error-level 'error
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-double-exclamation-mark
      :fringe-face 'flycheck-fringe-error
      :error-list-face 'flycheck-error-list-error)
    (flycheck-define-error-level 'warning
      :severity 100
      :compilation-level 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-exclamation-mark
      :fringe-face 'flycheck-fringe-warning
      :error-list-face 'flycheck-error-list-warning)
    (flycheck-define-error-level 'info
      :severity 100
      :compilation-level 0
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'flycheck-question-mark
      :fringe-face 'flycheck-fringe-info
      :error-list-face 'flycheck-error-list-info))

 (when (fboundp #'defhydra)
   (defhydra hydrant/flycheck (:color blue :hint nil)
     "
 ^Flycheck^         ^Errors^       ^Checker^
 _q_: quit          _<_: previous  _?_: describe
 _M_: manual        _>_: next      _d_: disable
 _v_: verify setup  _f_: check     _m_: mode
 ^ ^                _l_: list      _s_: select"
     ("q" ignore :exit t)
     ("M" flycheck-manual)
     ("v" flycheck-verify-setup)
     ("<" flycheck-previous-error :color pink)
     (">" flycheck-next-error :color pink)
     ("f" flycheck-buffer)
     ("l" flycheck-list-errors)
     ("?" flycheck-describe-checker)
     ("d" flycheck-disable-checker)
     ("m" flycheck-mode)
     ("s" flycheck-select-checker))))

(use-package hydra)

(use-package smartparens
  :straight (:host github
             :repo "andreyorst/smartparens"
             :branch "elixir-better-search")
  :hook (((clojure-mode
           emacs-lisp-mode
           common-lisp-mode
           scheme-mode
           lisp-mode
           racket-mode
           fennel-mode
           cider-repl-mode
           racket-repl-mode
           geiser-repl-mode
           inferior-lisp-mode
           inferior-emacs-lisp-mode)
          . aorst/enable-smartparens-strict-mode)
         (eval-expression-minibuffer-setup . aorst/minibuffer-enable-sp)
         ((org-mode
           markdown-mode
           prog-mode)
          . aorst/enable-smartparens-mode))
  :bind (:map smartparens-mode-map
         ("C-M-q" . sp-indent-defun)
         :map smartparens-strict-mode-map
         (";" . sp-comment))
  :custom
  (sp-highlight-pair-overlay nil)
  (sp-highlight-wrap-overlay nil)
  (sp-highlight-wrap-tag-overlay nil)
  (sp-wrap-respect-direction t)
  (sp-show-pair-delay 0)
  :custom-face
  (sp-show-pair-match-face ((t (:background unspecified
                                :weight normal))))
  :config
  (add-to-list 'sp-lisp-modes 'fennel-mode t)
  (require 'smartparens-config)
  (sp-use-paredit-bindings)
  (sp-with-modes '(fennel-mode)
    (sp-local-pair "`" "`"
                   :when '(sp-in-string-p
                           sp-in-comment-p)
                   :unless '(sp-lisp-invalid-hyperlink-p)))
  :config
  (defun aorst/minibuffer-enable-sp ()
    "Enable `smartparens-strict-mode' in the minibuffer, during `eval-expression'."
    (setq-local comment-start ";")
    (sp-local-pair 'minibuffer-pairs "'" nil :actions nil)
    (sp-local-pair 'minibuffer-pairs "`" nil :actions nil)
    (sp-update-local-pairs 'minibuffer-pairs)
    (smartparens-strict-mode 1))
  (defun aorst/enable-smartparens-mode ()
    "Enable `smartparens-mode' and `show-smartparens-mode'."
    (smartparens-mode 1)
    (show-smartparens-mode 1))
  (defun aorst/enable-smartparens-strict-mode ()
    "Enable `smartparens-strict-mode' and `show-smartparens-mode'
unless `parinfer-rust-mode' is enabled."
    (unless (bound-and-true-p parinfer-rust-mode)
      (smartparens-strict-mode 1)
      (show-smartparens-mode 1)))
  (defun aorst/wrap-fix-cursor-position (_ action _)
    "Set cursor position inside expression when wrapping."
    (when (and (eq action 'wrap)
               (eq (point)
                   (marker-position (sp-get sp-last-wrapped-region :beg))))
      (goto-char (sp-get sp-last-wrapped-region :beg-in))))
  (dolist (paren '("(" "[" "{"))
    (sp-pair paren nil :post-handlers '(:add aorst/wrap-fix-cursor-position))))

(use-package flx)

(use-package ivy
  :commands ivy-mode
  :hook ((minibuffer-setup . aorst/minibuffer-defer-garbage-collection)
         (minibuffer-exit . aorst/minibuffer-restore-garbage-collection)
         ((aorst--theme-change
           aorst--solaire-swap-bg)
          . aorst/ivy-setup-faces))
  :bind (("C-x b" . ivy-switch-buffer)
         ("C-x C-b" . ivy-switch-buffer))
  :custom-face
  (ivy-org ((t (:inherit default))))
  :custom
  (ivy-count-format "")
  (ivy-ignore-buffers '("\\` " "\\`\\*"))
  (ivy-display-style nil)
  (ivy-minibuffer-faces nil)
  (ivy-minibuffer-faces '(default default default default))
  (ivy-use-virtual-buffers t)
  (enable-recursive-minibuffers t)
  :config
  (defun aorst/ivy-setup-faces ()
    (let ((mode-line-color (face-attribute 'mode-line :background)))
      (when (and (fboundp #'doom-darken)
                 (eq (face-attribute 'ivy-current-match :background)
                     mode-line-color))
        (set-face-attribute
         'ivy-current-match nil
         :background (if (aorst/dark-mode-p)
                         (doom-lighten mode-line-color 0.2)
                       (doom-darken mode-line-color 0.1))))))
  (defun aorst/minibuffer-defer-garbage-collection ()
    "Defer garbage collection for minibuffer"
    (setq gc-cons-threshold most-positive-fixnum))
  (defun aorst/minibuffer-restore-garbage-collection ()
    "Resotre garbage collection settings."
    (run-at-time
     1 nil (lambda () (setq gc-cons-threshold aorst--gc-cons-threshold))))
  :init
  (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
  (ivy-mode 1))

(use-package counsel
  :commands (counsel-M-x
             counsel-find-file
             counsel-file-jump
             counsel-recentf
             counsel-rg
             counsel-describe-function
             counsel-describe-variable
             counsel-faces
             counsel-find-library)
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-x f" . counsel-file-jump)
         ("C-x C-r" . counsel-recentf)
         ("C-x d" . counsel-dired)
         ("C-h f" . counsel-describe-function)
         ("C-h C-f" . counsel-faces)
         ("C-h v" . counsel-describe-variable)
         ("C-h l" . counsel-find-library))
  :config
  (when (executable-find "fd")
    (define-advice counsel-file-jump (:around (foo &optional initial-input initial-directory) aorst:counsel-fd)
      (let ((find-program "fd")
            (counsel-file-jump-args (split-string "-L --type f --hidden")))
        (funcall foo initial-input initial-directory))))
  (when (executable-find "rg")
    (setq counsel-rg-base-command
          "rg -S --no-heading --hidden --line-number --color never %s .")))

(use-package company
  :bind (:map company-mode-map
         ([remap completion-at-point] . company-complete)
         ;; ([remap indent-for-tab-command] . company-indent-or-complete-common)
         ("M-/" . company-complete)
         :map company-active-map
         ("TAB" . company-complete-common-or-cycle)
         ("<tab>" . company-complete-common-or-cycle)
         ("<S-Tab>" . company-select-previous)
         ("<backtab>" . company-select-previous)
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous)
         ("C-d" . company-show-doc-buffer)
         ("M-." . company-show-location))
  :hook (after-init . global-company-mode)
  :custom
  (tab-always-indent 'complete)
  (tab-first-completion 'word-or-paren-or-punct)
  (company-idle-delay 0)
  (company-require-match 'never)
  (company-minimum-prefix-length 2)
  (company-tooltip-align-annotations t)
  (company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                       company-preview-frontend
                       company-echo-metadata-frontend))
  (company-backends '(company-capf company-files company-dabbrev-code))
  (company-tooltip-minimum-width 30)
  (company-tooltip-maximum-width 60))

(use-package company-posframe
  :after company
  :custom
  (company-posframe-quickhelp-show-header nil)
  (company-posframe-show-indicator nil)
  (company-posframe-show-metadata nil)
  :config
  (let ((params (list :poshandler #'company-posframe-quickhelp-right-poshandler
                      :internal-border-width 0
                      :lines-truncate t
                      :left-fringe 1
                      :right-fringe 1
                      :timeout 60
                      :no-properties nil)))
    (setq company-posframe-quickhelp-show-params params
          company-posframe-show-params params))
  (company-posframe-mode))

(use-package undo-tree
  :commands global-undo-tree-mode
  :bind (("C-z" . undo-tree-undo)
         ("C-S-z" . undo-tree-redo))
  :init (global-undo-tree-mode 1))

(use-package yasnippet
  :config
  (add-to-list 'yas-key-syntaxes 'yas-shortest-key-until-whitespace))

(use-package with-editor)
(use-package magit
  :hook (git-commit-mode . flyspell-mode)
  :bind (("<f12>" . magit-status))
  :custom
  (magit-ediff-dwim-show-on-hunks t)
  (magit-diff-refine-ignore-whitespace nil)
  (magit-diff-refine-hunk 'all)
  (magit-blame-styles
   '((headings
      (heading-format . "%-20a %C %s\n"))
     (margin
      (margin-format " %s%f" " %C %a" " %H")
      (margin-width . 42)
      (margin-face . magit-blame-margin)
      (margin-body-face magit-blame-dimmed))
     (highlight
      (highlight-face . magit-blame-highlight))
     (lines
      (show-lines . nil)
      (show-message . t))))
  :config
  (advice-add 'magit-set-header-line-format :override #'ignore))

(use-package magit-todos
  :after magit
  :init
  ;; don't break Magit on systems that don't have `nice'
  (unless (executable-find "nice")
    (setq magit-todos-nice nil))
  :config
  (let ((inhibit-message t))
    (magit-todos-mode 1))
  (transient-append-suffix 'magit-status-jump '(0 0 -1)
    '("T " "Todos" magit-todos-jump-to-todos)))

(use-package ediff
  :straight nil
  :hook ((ediff-before-setup . aorst/store-pre-ediff-winconfig)
         (ediff-quit . aorst/restore-pre-ediff-winconfig)
         (ediff-keymap-setup . aorst/ediff-setup-keys))
  :custom-face
  (ediff-fine-diff-C ((t (:background unspecified
                          :inherit ediff-current-diff-C))))
  (ediff-fine-diff-B ((t (:background unspecified
                          :inherit diff-refine-added))))
  (ediff-fine-diff-A ((t (:background unspecified
                          :inherit diff-refine-removed))))
  :config
  (advice-add 'ediff-window-display-p :override #'ignore)
  :custom
  (ediff-split-window-function 'split-window-horizontally)
  :init
  (defvar aorst--ediff-last-windows nil
    "Stores window configuration before `ediff' was invoked.")
  (defun aorst/store-pre-ediff-winconfig ()
    (setq aorst--ediff-last-windows (current-window-configuration)))
  (defun aorst/restore-pre-ediff-winconfig ()
    (set-window-configuration aorst--ediff-last-windows))
  (defun aorst/ediff-copy-both-to-C ()
    (interactive)
    (ediff-copy-diff ediff-current-difference nil 'C nil
                     (concat
                      (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                      (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
  (defun aorst/ediff-setup-keys ()
    (define-key ediff-mode-map "d" #'aorst/ediff-copy-both-to-C)))

(use-package diff
  :straight nil
  :after magit
  :hook (aorst--theme-change . aorst/diff-setup-faces)
  :custom-face
  (diff-added ((t (:inherit magit-diff-added-highlight))))
  (diff-removed ((t (:inherit magit-diff-removed-highlight))))
  :config
  (defun aorst/diff-setup-faces ()
    (set-face-attribute 'diff-added nil :foreground nil :background nil)
    (set-face-attribute 'diff-removed nil :foreground nil :background nil)
    (dolist (face-reference '((diff-refine-added magit-diff-added-highlight)
                              (diff-refine-removed magit-diff-removed-highlight)))
      (apply #'aorst/create-accent-face face-reference)))
  (aorst/diff-setup-faces))

(use-package smerge-mode
  :straight nil
  :after magit
  :hook (aorst--theme-change . aorst/smerge-setup-faces)
  :custom-face
  (smerge-refined-added ((t (:inherit magit-diff-added-highlight))))
  (smerge-refined-removed ((t (:inherit magit-diff-removed-highlight))))
  (smerge-lower ((t (:inherit magit-diff-added-highlight))))
  (smerge-upper ((t (:inherit magit-diff-removed-highlight))))
  (smerge-markers ((t (:weight bold
                       :extend t
                       :inherit font-lock-comment-face))))
  :config
  (defun aorst/smerge-setup-faces ()
    (dolist (face-reference '((smerge-refined-added magit-diff-added-highlight)
                              (smerge-refined-removed magit-diff-removed-highlight)))
      (apply #'aorst/create-accent-face face-reference)))
  (aorst/smerge-setup-faces))

(use-package phi-search)
(use-package mc-extras)
(use-package multiple-cursors
  :commands (mc/cycle-backward
             mc/cycle-forward)
  :bind (("S-<mouse-1>" . mc/add-cursor-on-click)
         ("C-c m" . hydrant/mc/body)
         :map mc/keymap
         ("<return>" . nil)
         ("C-s" . phi-search)
         ("C-r" . phi-search-backward))
  :config
  (when (fboundp #'defhydra)
    (defhydra hydrant/mc (:hint nil :color pink)
      "
 ^Select^                 ^Discard^                      ^Edit^               ^Navigate^
 _M-s_: split lines       _M-SPC_:  discard current      _&_: align           _(_: cycle backward
 _s_:   select regexp     _b_:      discard blank lines  _#_: insert numbers  _)_: cycle forward
 _n_:   select next       _d_:      remove duplicated    ^ ^                  ^ ^
 _p_:   select previous   _q_ or _g_: exit hydrant       ^ ^                  ^ ^
 _C_:   select next line  _G_:      exit mc mode"
      ("M-s" mc/edit-ends-of-lines)
      ("s" mc/mark-all-in-region-regexp)
      ("n" mc/mark-next-like-this-word)
      ("p" mc/mark-previous-like-this-word)
      ("&" mc/vertical-align-with-space)
      ("(" mc/cycle-backward)
      (")" mc/cycle-forward)
      ("M-SPC" mc/remove-current-cursor)
      ("b" mc/remove-cursors-on-blank-lines)
      ("d" mc/remove-duplicated-cursors)
      ("C" mc/mark-next-lines)
      ("#" mc/insert-numbers)
      ("q" mc/remove-duplicated-cursors :exit t)
      ("g" mc/remove-duplicated-cursors :exit t)
      ("G" mc/keyboard-quit :exit t))))

(use-package expand-region
  :bind (("C-c e" . hydrant/er/body))
  :config
  (when (fboundp #'defhydra)
    (defhydra hydrant/er (:color pink :hint nil)
      "
 ^Expand/Discard^                ^Mark^
 _e_:      expand region         _(_: inside pairs
 _r_:      reduce region         _)_: around pairs
 _g_ or _q_: exit hydrant          _'_: inside quotes
 _G_:      discard region, exit  _\"_: around quotes
 ^ ^  ^ ^                          _p_: paragraph"
      ("e" er/expand-region)
      ("r" er/contract-region)
      ("p" er/mark-paragraph)
      ("(" er/mark-inside-pairs)
      (")" er/mark-outside-pairs)
      ("'" er/mark-inside-quotes)
      ("\"" er/mark-outside-quotes)
      ("g" ignore :exit t)
      ("q" ignore :exit t)
      ("G" (lambda () (interactive) (deactivate-mark t)) :exit t)
      ("Q" (lambda () (interactive) (deactivate-mark t)) :exit t))))

(use-package iedit
  :bind (("M-n" . aorst/iedit-current-or-expand)
         ("C-c i" . aorst/iedit-hydrant))
  :custom
  (iedit-toggle-key-default nil)
  :custom-face
  (iedit-occurrence ((t (:background unspecified
                         :foreground unspecified
                         :inverse-video unspecified
                         :inherit region))))
  :init
  (defun aorst/iedit-to-mc-hydrant ()
    "Calls `iedit-to-mc-mode' and opens hydra for multiple cursors."
    (interactive)
    (iedit-switch-to-mc-mode)
    (hydrant/mc/body))
  (defun aorst/iedit-current-or-expand (&optional arg)
    "Select only currnent occurrence with `iedit-mode'.  Expand to
  next occurrence if `iedit-mode' is already active."
    (interactive "P")
    (if (bound-and-true-p iedit-mode)
        (if (symbolp arg)
            (iedit-expand-down-to-occurrence)
          (iedit-expand-up-to-occurrence))
      (iedit-mode 1)))
  (when (fboundp #'defhydra)
    (defhydra hydrant/iedit (:hint nil :color pink)
      "
 ^Select^                  ^Discard^                   ^Edit^               ^Navigate^
 _n_: next occurrence      _M-SPC_:  toggle selection  _u_: uppercase       _(_: previous selection
 _p_: previous occurrence  _q_ or _g_: exit hydrant      _d_: downcase        _)_: next selection
 ^ ^                       _G_:      exit iedit-mode   _#_: insert numbers
 ^ ^                       _m_:      switch to mc"
      ("n" iedit-expand-down-to-occurrence)
      ("m" aorst/iedit-to-mc-hydrant :exit t)
      ("p" iedit-expand-up-to-occurrence)
      ("u" iedit-upcase-occurrences)
      ("d" iedit-downcase-occurrences)
      ("#" iedit-number-occurrences)
      ("(" iedit-prev-occurrence)
      (")" iedit-next-occurrence)
      ("M-SPC" iedit-toggle-selection)
      ("q" ignore :exit t)
      ("g" ignore :exit t)
      ("G" (lambda () (interactive) (iedit-mode -1)) :exit t))
    (defun aorst/iedit-hydrant ()
      "toggle iedit mode for item under point, and open `hydrant/iedit'."
      (interactive)
      (ignore-errors
        (unless (bound-and-true-p iedit-mode)
          (iedit-mode 1))
        (hydrant/iedit/body)))))

(use-package lsp-mode
  :hook (((rust-mode c-mode c++-mode java-mode elixir-mode) . lsp)
         (lsp-mode . aorst/disable-flycheck)
         (lsp-mode . yas-minor-mode))
  :custom-face
  (lsp-modeline-code-actions-face ((t (:inherit mode-line))))
  :custom
  (lsp-enable-links nil)
  (lsp-keymap-prefix "C-c l")
  (lsp-rust-clippy-preference "on")
  (lsp-completion-provider :capf)
  (lsp-diagnostics-provider :flymake)
  (lsp-enable-indentation nil)
  (lsp-enable-symbol-highlighting t)
  (lsp-rust-server 'rust-analyzer)
  (lsp-session-file (expand-file-name ".lsp-session" user-emacs-directory))
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-enable-dap-auto-configure nil)
  (lsp-enable-semantic-highlighting nil)
  (lsp-log-io nil)
  (lsp-enable-folding nil)
  :config
  (defun aorst/disable-flycheck ()
    (flycheck-mode -1)))

(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode
  :bind (:map lsp-ui-mode-map
         ("M-." . lsp-ui-peek-find-definitions)
         ("M-/" . lsp-ui-peek-find-references))
  :custom
  (lsp-ui-doc-border (face-attribute 'mode-line-inactive :background))
  (lsp-ui-sideline-enable nil)
  (lsp-ui-doc-enable nil)
  (lsp-ui-imenu-enable nil)
  (lsp-ui-doc-delay 1 "higher than eldoc delay")
  (lsp-ui-doc-max-width 1000)
  (lsp-ui-doc-show-with-cursor nil)
  (lsp-ui-doc-show-with-mouse nil)
  (lsp-ui-doc-position 'at-point)
  :config
  (when (fboundp #'aorst/escape)
    (define-advice lsp-ui-doc--make-request (:around (foo) aorst:hide-lsp-ui-doc)
      (unless (eq this-command 'aorst/escape)
        (funcall foo))))
  (lsp-ui-mode))

(use-package lsp-java
  :when (file-exists-p "/usr/lib/jvm/java-11-openjdk/bin/java")
  :custom (lsp-java-java-path "/usr/lib/jvm/java-11-openjdk/bin/java"))

(use-package project
  :straight nil
  :config
  (defvar aorst--project-root-markers
    '("Cargo.toml" "compile_commands.json" "compile_flags.txt" "project.clj" ".git")
    "Files or directories that indicate the root of a project.")
  (defun aorst/project-find-root (path)
    "Recursive search in PATH for root markers."
    (let ((this-dir (file-name-as-directory (file-truename path))))
      (cond
       ((aorst/project-root-p this-dir) (cons 'transient this-dir))
       ((equal "/" this-dir) nil)
       (t (aorst/project-find-root (concat this-dir "../"))))))
  (defun aorst/project-root-p (path)
    "Check if current PATH has any of project root markers."
    (memq t (mapcar (lambda (file)
                      (file-exists-p (concat path file)))
                    aorst--project-root-markers)))
  (add-to-list 'project-find-functions #'aorst/project-find-root))

(use-package clang-format
  :after cc-mode
  :bind (:map c-mode-base-map
         ("C-c C-M-f" . clang-format-buffer)))

(use-package server
  :straight nil
  :config
  (unless (server-running-p)
    (server-start)))

(use-package hideshow
  :straight nil
  :after transient
  :hook (prog-mode . hs-minor-mode)
  :bind (:map prog-mode-map
         ("<f6>" . hydrant/hideshow-menu/body))
  :config
  (when (fboundp #'defhydra)
    (defhydra hydrant/hideshow-menu (:color pink :hint nil)
      "
 ^Hide^       ^Show^       ^Exit^
 _ha_: all    _sa_: all    _qs_: quit show all
 _hb_: block  _sb_: block  _qh_: quit hide all
 ^  ^         ^  ^         _qq_: quit"
      ("ha" hs-hide-all)
      ("hb" hs-hide-block)
      ("sa" hs-show-all)
      ("sb" hs-show-block)
      ("qq" ignore :exit t)
      ("qs" hs-show-all :exit t)
      ("qh" hs-hide-all :exit t))))

(use-package edit-indirect
  :hook ((edit-indirect-after-creation . aorst/edit-indirect-header-line-setup))
  :bind (:map edit-indirect-mode-map
         ("C-c C-c" . edit-indirect-commit)
         ("C-c C-k" . edit-indirect-abort)
         ("C-c '" . nil))
  :config
  (defun aorst/edit-indirect-header-line-setup ()
    (setq-local
     header-line-format
     (substitute-command-keys
      "\\<edit-indirect-mode-map>Edit, then exit with `\\[edit-indirect-commit]' or abort with `\\[edit-indirect-abort]'"))))

(use-package separedit
  :hook (separedit-buffer-creation . aorst/separedit-header-line-setup)
  :bind (:map prog-mode-map
         ("C-c '" . separedit)
         :map edit-indirect-mode-map
         ("C-c '" . separedit))
  :custom
  (separedit-default-mode 'gfm-mode)
  :config
  (defun aorst/separedit-header-line-setup ()
    (setq-local
     header-line-format
     (substitute-command-keys
      "\\<edit-indirect-mode-map>Edit, then exit with `\\[separedit-commit]' or abort with `\\[edit-indirect-abort]'"))))

(use-package recentf
  :straight nil
  :config
  (add-to-list 'recentf-exclude "\\.gpg\\"))

(use-package dumb-jump
  :custom (dumb-jump-prefer-searcher 'rg)
  :config
  (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate))

(use-package which-key
  :config (which-key-mode t))

(use-package gcmh
  :config (gcmh-mode t))

(use-package paren
  :straight nil
  :custom
  (show-paren-when-point-in-periphery t)
  (show-paren-delay 0))

(use-package wgrep)

(use-package xref
  :straight nil
  :config
  (define-advice xref-push-marker-stack (:around (fn &optional m) aorst:remove-treemacs-from-xref-marker-stack)
    (let ((m (or m (point-marker))))
      (when (buffer-local-value 'treemacs--in-this-buffer (marker-buffer m))
        (with-current-buffer (window-buffer (next-window (selected-window) nil nil))
          (setf m (point-marker))))
      (funcall fn m))))

(use-package vc-hooks
  :straight nil
  :custom (vc-follow-symlinks t))

(use-package quail
  :straight nil
  :config
  (defun aorst/hide-quail-buffer ()
    "Hide Quail buffer."
    (with-current-buffer quail-completion-buf
      (when (string= "*Quail Completions*" (buffer-name))
        (rename-buffer " *Quail Completions*"))))
  (define-advice quail-setup-completion-buf (:after () aorst:hide-quail-buffer)
    (aorst/hide-quail-buffer)))

(use-package rg
  :bind ("C-c r" . rg))

(use-package isayt
  :straight (:host gitlab
             :repo "andreyorst/isayt.el"
             :branch "main")
  :hook (smartparens-strict-mode . isayt-mode))

(provide 'init)
;;; init.el ends here
