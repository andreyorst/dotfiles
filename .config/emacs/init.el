;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-

;; Author: Andrey Listopadov
;; Keywords: literate programming, Emacs configuration
;; Homepage: https://gitlab.com/andreyorst/dotfiles/-/tree/master/.config/emacs

;;; Commentary:
;; Emacs config.
;; This file was automatically generated by `org-babel-tangle'.
;; Do not change this file.  Main config is located in README.org at `user-emacs-directory'

;;; Code:

(unless (featurep 'early-init)
  (load (expand-file-name "early-init" user-emacs-directory)))

(straight-use-package 'use-package)
(defvar straight-use-package-by-default)
(setq straight-use-package-by-default t)
(require 'use-package)

(use-package cus-edit
  :straight nil
  :custom (custom-file (expand-file-name "custom.el" user-emacs-directory))
  :init (load custom-file :noerror))

(defvar aorst--disabled-commands (expand-file-name "disabled.el" user-emacs-directory)
  "File to store disabled commands, that were enabled permamently.")

(define-advice enable-command (:around (foo command) aorst:put-in-custom-file)
  (let ((user-init-file aorst--disabled-commands))
    (funcall foo command)))

(load aorst--disabled-commands :noerror)

(defgroup local-config nil
  "Customization group for local settings."
  :prefix "local-config-")

(use-package startup
  :straight nil
  :no-require t
  :custom
  (user-mail-address "andreyorst@gmail.com")
  (user-full-name "Andrey Listopadov"))

(setq ring-bell-function 'ignore)

(use-package files
  :straight nil
  :custom
  (backup-by-copying t)
  (create-lockfiles nil)
  (backup-directory-alist
   `(("." . ,(expand-file-name ".cache/backups" user-emacs-directory))))
  (auto-save-file-name-transforms
   `((".*" ,(expand-file-name ".cache/auto-save/" user-emacs-directory) t)))
  (auto-save-no-message t)
  (auto-save-interval 100)
  :config
  (let ((auto-save-dir (expand-file-name ".cache/auto-save/" user-emacs-directory)))
    (unless (file-exists-p auto-save-dir)
      (make-directory auto-save-dir t))))

(use-package subr
  :straight nil
  :no-require t
  :init
  (fset 'yes-or-no-p 'y-or-n-p))

(use-package mwheel
  :straight nil
  :demand
  :bind (("S-<down-mouse-1>" . nil)
         ("S-<mouse-3>" . nil)
         ("<mouse-4>" . mwheel-scroll)
         ("<mouse-5>" . mwheel-scroll))
  :custom
  (mouse-wheel-flip-direction t)
  (mouse-wheel-tilt-scroll t)
  (mouse-wheel-progressive-speed nil)
  :config
  (global-set-key (kbd "<mouse-3>") menu-bar-edit-menu)
  (defun aorst/truncated-lines-p ()
    "Non-nil if any line is longer than `window-width' + `window-hscroll'.
Returns t if any line exceeds right border of the window.  Used
for stopping scroll from going beyond longest line.  Based on
`so-long-detected-long-line-p'."
    (save-excursion
      (goto-char (point-min))
      (let* ((window-width
              ;; this computes a more accurate width rather than `window-width', and respects
              ;; `text-scale-mode' font width.
              (/ (window-body-width nil t) (window-font-width)))
             (hscroll-offset
              ;; `window-hscroll' returns columns that are not affected by `text-scale-mode'.
              ;; Because of that we have to recompute correct `window-hscroll' by multiplying
              ;; it with a non-scaled value, and divide with scaled width value, and round it
              ;; to upper boundary.  Since there's no way to get unscaled value, we have to
              ;; get width of a face that is not scaled by `text-scale-mode', such as
              ;; `window-divider' face.
              (ceiling (/ (* (window-hscroll) (window-font-width nil 'window-divider))
                          (float (window-font-width)))))
             (line-number-width
              ;; compensate line numbers width
              (if (bound-and-true-p display-line-numbers-mode)
                  (- display-line-numbers-width)
                0))
             ;; subtracting 2 for extra space in case some calculations were imprecise
             (threshold (+ window-width hscroll-offset line-number-width -2)))
        (catch 'excessive
          (while (not (eobp))
            (setq start (point))
            (save-restriction
              (narrow-to-region start (min (+ start 1 threshold)
                                           (point-max)))
              (forward-line 1))
            (unless (or (bolp)
                        (and (eobp) (<= (- (point) start)
                                        threshold)))
              (throw 'excessive t)))))))
  (define-advice scroll-left (:around (foo &optional arg set-minimum) aorst:scroll-left)
    (when (and truncate-lines
               (aorst/truncated-lines-p)
               (not (memq major-mode '(vterm-mode term-mode))))
      (funcall foo arg set-minimum)))
  (setq-default auto-window-vscroll nil
                mouse-highlight nil
                hscroll-step 1
                hscroll-margin 1
                scroll-margin 1
                ;; scroll-step 1
                ;; scroll-conservatively 101
                ;; scroll-up-aggressively 0.01
                ;; scroll-down-aggressively 0.01
                scroll-preserve-screen-position nil)
  (unless (display-graphic-p)
    (xterm-mouse-mode t)))

(setq-default indent-tabs-mode nil)

(use-package savehist
  :straight nil
  :config (savehist-mode 1))

(use-package mule-cmds
  :straight nil
  :no-require t
  :custom
  (default-input-method 'russian-computer))

(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

(use-package startup
  :straight nil
  :no-require t
  :custom
  (initial-major-mode 'lisp-interaction-mode)
  (initial-scratch-message ""))

(use-package delsel
  :straight nil
  :init
  (delete-selection-mode t))

(use-package simple
  :straight nil
  :bind (("M-z" . zap-up-to-char)
         ("M-S-z" . zap-to-char)
         ("C-x k" . kill-this-buffer)
         ("C-h C-f" . describe-face)
         ("<f2>" . ignore))
  :hook ((before-save . delete-trailing-whitespace)
         (overwrite-mode . aorst/overwrite-set-cursor-shape))
  :custom
  (yank-excluded-properties t "Disable all text properties when yanking.")
  (blink-matching-delay 0)
  (blink-matching-paren t)
  :config
  (defun aorst/overwrite-set-cursor-shape ()
    (when (display-graphic-p)
      (setq cursor-type (if overwrite-mode 'box 'bar))))
  :init
  (column-number-mode 1)
  (line-number-mode 1)
  (transient-mark-mode -1))

(setq-default truncate-lines t)
(setq-default bidi-paragraph-direction 'left-to-right)

(when (version<= "27.1" emacs-version)
  (setq bidi-inhibit-bpa t))

(use-package minibuffer
  :straight nil
  :bind (:map minibuffer-inactive-mode-map
         ("<mouse-1>" . ignore))
  :custom
  (completion-styles '(partial-completion basic))
  (completion-flex-nospace t)
  (read-buffer-completion-ignore-case t)
  (read-file-name-completion-ignore-case t)
  :custom-face (completions-first-difference ((t (:inherit unspecified)))))

(defun aorst/formfeed-line ()
  "Display the formfeed ^L char as comment or as continuous line."
  (unless buffer-display-table
    (setq buffer-display-table (make-display-table)))
  (aset buffer-display-table ?\^L
        (vconcat (make-list (or fill-column 70)
                            (make-glyph-code
                             (string-to-char (or comment-start "-"))
                             'shadow)))))

(dolist (mode-hook '(help-mode-hook
                     org-mode-hook
                     outline-mode-hook
                     prog-mode-hook))
  (add-hook mode-hook #'aorst/formfeed-line))

(use-package window
  :straight nil
  :bind ("C-x C-b" . bury-buffer))

(use-package comint
  :straight nil
  :custom (comint-scroll-show-maximum-output nil))

(defun aorst/real-buffer-p (&optional buffer)
  "Determines whether BUFFER is real."
  (not (or (string-match-p
            (regexp-opt '("*Treemacs"
                          "*vterm*"
                          " *Minibuf"
                          " *Echo Area"
                          "*Process List*"
                          "*Ediff"
                          " *LV*"
                          "*Ilist*"))
            (buffer-name buffer))
           (minibufferp))))

(define-advice keyboard-quit (:around (quit) aorst:keyboard-quit)
  "Quit in current context.

When there is an active minibuffer and we are not inside it close
it.  When we are inside the minibuffer use the regular
`minibuffer-keyboard-quit' which quits any active region before
exiting.  When there is no minibuffer `keyboard-quit' unless we
are defining or executing a macro."
  (cond ((active-minibuffer-window)
         (if (minibufferp)
             (minibuffer-keyboard-quit)
           (abort-recursive-edit)))
        (t
         (unless (or defining-kbd-macro
                     executing-kbd-macro)
           (funcall quit)))))

(defun aorst/font-installed-p (font-name)
  "Check if font with FONT-NAME is available."
  (find-font (font-spec :name font-name)))

(defun aorst/split-pararagraph-into-lines ()
  "Split current paragraph into lines with one sentence each."
  (interactive)
  (save-excursion
    (let ((fill-column (point-max)))
      (fill-paragraph))
    (let ((auto-fill-p auto-fill-function)
          (end (progn (end-of-line) (backward-sentence) (point))))
      (back-to-indentation)
      (unless (= (point) end)
        (auto-fill-mode -1)
        (while (< (point) end)
          (forward-sentence)
          (delete-horizontal-space)
          (newline-and-indent))
        (deactivate-mark)
        (when auto-fill-p
          (auto-fill-mode t))
        (when (looking-at "^$")
          (backward-delete-char 1))))))

(defun aorst/dark-mode-p ()
  "Check if frame is dark or not."
  (if window-system
      (thread-last "gsettings get org.gnome.desktop.interface gtk-theme"
        (shell-command-to-string)
        (string-trim-right)
        (string-suffix-p "-dark'"))
      (eq 'dark (frame-parameter nil 'background-mode))))

(defun aorst/create-accent-face (face ref-face)
  "Set FACE background to accent color by blending REF-FACE foreground and background.
Depends on `doom-blend'."
  (let ((fg (face-attribute ref-face :foreground nil t))
        (bg (face-attribute ref-face :background nil t)))
    (if (and (stringp fg)
             (stringp bg)
             (fboundp #'doom-blend))
        (set-face-attribute face nil
                            :foreground fg
                            :distant-foreground fg
                            :weight 'bold
                            :background (if (aorst/dark-mode-p)
                                            (doom-blend bg fg 0.8)
                                          (doom-blend bg fg 0.9))
                            :inherit nil
                            :extend t
                            :inverse-video nil)
      (set-face-attribute face nil
                          :foreground nil
                          :distant-foreground nil
                          :background nil
                          :weight 'bold
                          :inherit ref-face
                          :extend t
                          :inverse-video t))))

(defmacro doto (x &rest forms)
  "Evaluates x then calls all of the functions with the value of
x supplied at the front of the given arguments.  The forms are
evaluated in order.  Returns x."
  (declare (indent defun))
  (let ((gx (gensym)))
    `(let ((,gx ,x))
       ,@(mapcar (lambda (f)
                   (if (listp f)
                       `(,(car f) ,gx ,@(cdr f))
                     `(,f ,gx)))
                 forms)
       ,gx)))

(defun aorst/minibuffer-defer-garbage-collection ()
  "Defer garbage collection for minibuffer"
  (setq gc-cons-threshold most-positive-fixnum))

(defun aorst/minibuffer-restore-garbage-collection ()
  "Resotre garbage collection settings."
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold aorst--gc-cons-threshold))))

(use-package startup
  :straight nil
  :no-require t
  :custom
  (inhibit-splash-screen t))

(use-package menu-bar
  :straight nil
  :unless (display-graphic-p)
  :config
  (menu-bar-mode -1))

(defvar aorst--line-pixel-height (line-pixel-height)
  "Line height in pixels.
Used in various places to avoid getting wrong line height when
`text-scale-mode' is active.")

(when window-system
  (setq-default x-gtk-use-system-tooltips nil)
  (setq-default tooltip-x-offset 0)
  (setq-default tooltip-y-offset aorst--line-pixel-height)
  (setq-default tooltip-frame-parameters
                `((name . "tooltip")
                  (internal-border-width . 2)
                  (border-width . 1)
                  (no-special-glyphs . t)))
  (scroll-bar-mode -1)
  (tool-bar-mode -1))

(when window-system
  (setq-default cursor-type '(bar . 1)
                cursor-in-non-selected-windows nil))

(cond ((aorst/font-installed-p "JetBrainsMono")
       (set-face-attribute 'default nil :font "JetBrainsMono 10"))
      ((aorst/font-installed-p "Source Code Pro")
       (set-face-attribute 'default nil :font "Source Code Pro 10")))

(when (aorst/font-installed-p "DejaVu Sans")
  (set-face-attribute 'variable-pitch nil :font "DejaVu Sans 10"))

(use-package all-the-icons
  :when (window-system)
  :config
  (when (not (aorst/font-installed-p "all-the-icons"))
    (all-the-icons-install-fonts t)))

(defcustom aorst--dark-theme 'doom-miramare
  "Dark theme to use."
  :tag "Dark theme"
  :type 'symbol
  :group 'local-config)

(defcustom aorst--light-theme 'doom-one-light
  "Light theme to use."
  :tag "Light theme"
  :type 'symbol
  :group 'local-config)

(use-package doom-themes
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  :custom-face
  (fringe    ((t (:background nil))))
  (highlight ((t (:foreground unspecified
                  :distant-foreground unspecified
                  :background unspecified))))
  (org-block ((t (:extend t :background unspecified :inherit hl-line))))
  (org-block-begin-line ((t (:slant unspecified
                             :weight normal
                             :background unspecified
                             :inherit org-block
                             :extend t))))
  (org-block-end-line   ((t (:background unspecified
                             :inherit org-block-begin-line
                             :extend t))))
  (secondary-selection  ((t (:foreground unspecified
                             :background unspecified
                             :inherit region
                             :extend t))))
  (org-level-2 ((t (:inherit outline-3))))
  (org-level-3 ((t (:inherit outline-4))))
  (org-level-4 ((t (:inherit outline-2))))
  (org-level-5 ((t (:inherit outline-1))))
  (org-level-6 ((t (:inherit outline-3))))
  (org-level-7 ((t (:inherit outline-4))))
  (org-level-8 ((t (:inherit outline-2))))
  (org-drawer ((t (:foreground nil :inherit shadow))))
  (font-lock-comment-face ((t (:background unspecified))))
  :config
  (if (aorst/dark-mode-p)
      (load-theme aorst--dark-theme t)
    (load-theme aorst--light-theme t)))

(defvar aorst--theme-change-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")

(define-advice load-theme (:after (&rest _) aorst:setup-theme)
  (run-hooks 'aorst--theme-change-hook))

(define-advice disable-theme (:after (&rest _) aorst:setup-theme)
  (run-hooks 'aorst--theme-change-hook))

(setq-default custom-safe-themes t)

(setq mode-line-percent-position nil)

(dolist (face '(mode-line mode-line-inactive))
  (set-face-attribute face nil
                      :box nil))

(defvar mode-line-l-format 'aorst--mode-line-buffer-name)
(defvar mode-line-r-format
  '(concat
    (aorst/mode-line-buffer-state)
    (aorst/mode-line-line-column)
    (aorst/mode-line-input-method)
    (aorst/mode-line-line-encoding)
    (aorst/mode-line-buffer-encoding)
    (aorst/mode-line-indent-mode)
    (aorst/mode-line-mode-name)
    (aorst/mode-line-git-branch)
    aorst--mode-line-lsp
    aorst--mode-line-flymake
    aorst--mode-line-flycheck
    aorst--mode-line-structural))

(use-package frame
  :straight nil
  :when window-system
  :hook (aorst--theme-change . aorst/window-divider-setup-faces)
  :custom
  (window-divider-default-bottom-width 1)
  (window-divider-default-right-width 1)
  (window-divider-default-places t)
  :config
  (window-divider-mode t)
  (defun aorst/window-divider-setup-faces ()
    (let* ((color (face-attribute 'default :background))
           (color (if (fboundp #'doom-darken)
                      (if (aorst/dark-mode-p)
                          (doom-darken color 0.2)
                        (doom-darken color 0.1)))))
      (set-face-attribute 'window-divider nil :foreground color)))
  (aorst/window-divider-setup-faces))

(defcustom aorst--title-show-bufname t
  "Whether to include bufname to titlebar.
Bufname is not necessary on GNOME, but may be useful in other DEs."
  :type 'boolean
  :group 'local-config)

(setq-default frame-title-format
              '(:eval (let ((match (string-match "[ *]" (buffer-name))))
                        (if (or (and match (= match 0))
                                (not aorst--title-show-bufname))
                            "Emacs"
                          "%b — Emacs"))))

(use-package uniquify
  :straight nil
  :custom (uniquify-buffer-name-style 'forward))

(use-package display-line-numbers
  :straight nil
  ;; :hook (prog-mode . display-line-numbers-mode)
  :custom
  (display-line-numbers-width 4)
  (display-line-numbers-grow-only t)
  (display-line-numbers-width-start t)
  :config
  ;; (define-advice previous-line (:around (f &rest args) aorst:previous-line-margin)
;;     "The `display-line-numbers' mode affects `scroll-margin' variable.

;; This advice recalculates the amount of lines needed to scroll to
;; ensure `scroll-margin' preserved."
;;     (apply f args)
;;     (let ((diff (- scroll-margin
;;                    (- (line-number-at-pos (point))
;;                       (line-number-at-pos (window-start))))))
;;       (when (> diff 0)
;;         (scroll-down diff))))
  )

(use-package minions
  :config (minions-mode))

(use-package org
  :straight (:type built-in)
  :hook (((org-capture-mode org-src-mode) . aorst/discard-history)
         (aorst--theme-change . aorst/org-setup-faces))
  :bind (:map org-mode-map
         ("M-Q" . aorst/split-pararagraph-into-lines)
         ("C-c l" . org-store-link))
  :custom
  (org-startup-with-inline-images nil)
  (org-tags-column -120)
  (org-startup-folded 'content)
  (org-hide-emphasis-markers t)
  (org-adapt-indentation nil)
  (org-hide-leading-stars t)
  (org-highlight-latex-and-related '(latex))
  (org-preview-latex-default-process 'dvisvgm)
  (org-src-fontify-natively t)
  (org-preview-latex-image-directory ".ltximg/")
  (org-confirm-babel-evaluate nil)
  (org-imenu-depth 8)
  (org-log-done t)
  (org-agenda-files '("~/Tasks"))
  (org-image-actual-width nil)
  :config
  (setq org-format-latex-options
        (plist-put org-format-latex-options
                   :scale
                   (if (executable-find "gsettings")
                       (string-to-number
                        (shell-command-to-string
                         "gsettings get org.gnome.desktop.interface text-scaling-factor"))
                     1.0)))
  (defun aorst/discard-history ()
    "Discard undo history of org src and capture blocks."
    (setq buffer-undo-list nil)
    (set-buffer-modified-p nil))
  (define-advice org-return (:around (f &rest args) aorst:org-return)
    (let ((org-src-preserve-indentation t))
      (apply f args)))
  (define-advice org-cycle (:around (f &rest args) aorst:org-cycle)
    (let ((org-src-preserve-indentation t))
      (apply f args)))
  (defun aorst/org-setup-faces ()
    (set-face-attribute 'org-hide nil :foreground (face-attribute 'default :background))))

(use-package ox-hugo
  :after ox)

(use-package ox-latex
  :straight nil
  :after ox)

(with-eval-after-load 'org
  (use-package org-tempo
    :straight nil
    :defines org-version
    :unless (version<= org-version "9.1.9")))

(use-package prog-mode
  :straight nil
  :bind (:map prog-mode-map
         ("M-q" . aorst/indent-or-fill-sexp))
  :config
  (defun aorst/indent-or-fill-sexp ()
    "Indent s-expression or fill string/comment."
    (interactive)
    (let ((ppss (syntax-ppss)))
      (if (or (nth 3 ppss)
              (nth 4 ppss))
          (fill-paragraph)
        (indent-sexp)))))

(use-package cc-mode
  :straight nil
  :config (defun aorst/cc-mode-setup ()
            (c-set-offset 'case-label '+)
            (setq c-basic-offset 4
                  c-default-style "linux"
                  comment-start "//"
                  comment-end ""
                  tab-width 4))
  :hook ((c-mode-common . aorst/cc-mode-setup)))

(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :bind (:map markdown-mode-map
         ("M-Q" . aorst/split-pararagraph-into-lines))
  :custom
  (markdown-fontify-code-blocks-natively t)
  (markdown-command "pandoc")
  (markdown-hr-display-char nil)
  (markdown-list-item-bullets '("-")))

(use-package rust-mode
  :commands (rust-format-buffer)
  :bind (:map rust-mode-map
         ("C-c C-M-f" . rust-format-buffer)))

(use-package toml-mode)

(use-package geiser
  :hook (scheme-mode . geiser-mode)
  :custom
  (geiser-active-implementations '(guile))
  (geiser-default-implementation 'guile))

(use-package elisp-mode
  :straight nil
  :commands aorst/emacs-lisp-indent-function
  :hook ((emacs-lisp-mode . eldoc-mode)
         (emacs-lisp-mode . aorst/emacs-lisp-setup))
  :config
  (defun aorst/emacs-lisp-indent-function (indent-point state)
    "A replacement for `lisp-indent-function'.
Indents plists more sensibly. Adapted from DOOM Emacs:
https://github.com/hlissner/doom-emacs/blob/b03fdabe4fa8a07a7bd74cd02d9413339a485253/modules/lang/emacs-lisp/autoload.el#L91"
    (let ((normal-indent (current-column))
          (orig-point (point))
          target)
      (goto-char (1+ (elt state 1)))
      (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
      (cond ((and (elt state 2)
                  (or (not (looking-at-p "\\sw\\|\\s_"))
                      (eq (char-after) ?:)))
             (unless (> (save-excursion (forward-line 1) (point))
                        calculate-lisp-indent-last-sexp)
               (goto-char calculate-lisp-indent-last-sexp)
               (beginning-of-line)
               (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t))
             (backward-prefix-chars)
             (current-column))
            ((and (save-excursion
                    (goto-char indent-point)
                    (skip-syntax-forward " ")
                    (not (eq (char-after) ?:)))
                  (save-excursion
                    (goto-char orig-point)
                    (and (eq (char-after) ?:)
                         (eq (char-before) ?\()
                         (setq target (current-column)))))
             (save-excursion
               (move-to-column target t)
               target))
            ((let* ((function (buffer-substring (point) (progn (forward-sexp 1) (point))))
                    (method (or (function-get (intern-soft function) 'lisp-indent-function)
                                (get (intern-soft function) 'lisp-indent-hook))))
               (cond ((or (eq method 'defun)
                          (and (null method)
                               (> (length function) 3)
                               (string-match-p "\\`def" function)))
                      (lisp-indent-defform state indent-point))
                     ((integerp method)
                      (lisp-indent-specform method state indent-point normal-indent))
                     (method
                      (funcall method indent-point state))))))))
  (defun aorst/emacs-lisp-setup ()
    (setq-local lisp-indent-function
                #'aorst/emacs-lisp-indent-function))
  (defun org-babel-edit-prep:emacs-lisp (_info)
    "Setup Emacs Lisp buffer for Org Babel."
    (setq lexical-binding t)
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc))))

(use-package fennel-mode
  :bind (:map fennel-mode-map
         ("C-c C-k" . aorst/eval-each-sexp)
         ("M-." . xref-find-definitions)
         ("M-," . xref-pop-marker-stack)
         :map fennel-repl-mode-map
         ("C-c C-q" . aorst/quit-fennel-repl))
  :config
  (put 'global 'fennel-indent-function 1)
  (put 'local 'fennel-indent-function 1)
  (put 'var 'fennel-indent-function 1)
  (defvar org-babel-default-header-args:fennel '((:results . "silent")))
  (defun org-babel-execute:fennel (body params)
    "Evaluate a block of Fennel code with Babel."
    (let ((inferior-lisp-buffer fennel-repl--buffer))
      (lisp-eval-string body)))
  (defun aorst/eval-each-sexp (&optional arg)
    "Evaluate each s-expression in the buffer consequentially.
If prefix ARG specified, call `fennel-reload' function.  If
double prefix ARG specified call `fennel-reload' function and ask
for module name."
    (interactive "P")
    (if (symbolp arg)
        (save-excursion
          (save-restriction
            (goto-char (point-min))
            (while (save-excursion
                     (search-forward-regexp "[^[:space:]]." nil t))
              (forward-sexp)
              (lisp-eval-last-sexp))))
      (when fennel-mode-switch-to-repl-after-reload
        (switch-to-lisp t))
      (if (equal arg '(4))
          (funcall-interactively 'fennel-reload nil)
        (funcall-interactively 'fennel-reload t))))
  (defun aorst/quit-fennel-repl ()
    (interactive)
    (let ((window (get-buffer-window fennel-repl--buffer))
          (kill-buffer-query-functions
           (delq 'process-kill-buffer-query-function kill-buffer-query-functions)))
      (ignore-errors
        (when window
          (delete-window window)))
      (kill-buffer fennel-repl--buffer)))
  (define-advice fennel-repl (:after (&rest _) aorst:fennel-repl-indent-function)
    (setq-local lisp-indent-function 'fennel-indent-function)))

(use-package clojure-mode
  :hook (((clojure-mode
           clojurec-mode
           clojurescript-mode)
          . aorst/clojure-mode-setup))
  :config
  (defvar org-babel-default-header-args:clojure '((:results . "silent")))'
  (defun org-babel-execute:clojure (body params)
    "Evaluate a block of Clojure code with Babel."
    (lisp-eval-string body))
  (defun aorst/clojure-mode-setup ()
    "Setup Clojure buffer."
    (modify-syntax-entry ?# "w")
    (flycheck-mode)))

(use-package cider
  :hook ((cider-repl-mode cider-mode) . eldoc-mode)
  :bind (:map cider-repl-mode-map
         ("C-c C-o" . cider-repl-clear-buffer))
  :custom-face
  (cider-result-overlay-face ((t (:box (:line-width -1 :color "grey50")))))
  (cider-error-highlight-face ((t (:inherit flymake-error))))
  (cider-warning-highlight-face ((t (:inherit flymake-warning))))
  :custom
  (nrepl-log-messages nil)
  (cider-repl-display-help-banner nil)
  (cider-repl-tab-command #'indent-for-tab-command)
  (nrepl-hide-special-buffers t)
  (cider-test-show-report-on-success t)
  (cider-allow-jack-in-without-project t)
  (cider-use-fringe-indicators nil)
  (cider-font-lock-dynamically '(macro var deprecated))
  (cider-save-file-on-load nil)
  (cider-inspector-fill-frame nil)
  (cider-auto-select-error-buffer t)
  (cider-eval-spinner nil)
  (cider-repl-prompt-function #'cider-repl-prompt-newline)
  :config
  (setq cider-jdk-src-paths nil)
  (dolist (src (append (file-expand-wildcards "/usr/lib/jvm/java-*-openjdk/src.zip")
                       (file-expand-wildcards "/usr/lib/jvm/java-*-openjdk/lib/src.zip")
                       (file-expand-wildcards "~/.clojure/clojure-*-sources.jar")))

    (when (file-exists-p src)
      (unless (memq src cider-jdk-src-paths)
        (add-to-list 'cider-jdk-src-paths src t))))
  (defun cider-repl-prompt-newline (namespace)
    "Return a prompt string that mentions NAMESPACE with newline
appended."
    (format "%s\n> " namespace)))

(use-package flycheck-clj-kondo
  :when (executable-find "clj-kondo"))

(use-package clj-refactor
  :hook ((cider-mode . clj-refactor-mode)
         (cider-mode . yas-minor-mode))
  :custom
  (cljr-suppress-no-project-warning t)
  (cljr-warn-on-eval nil))

(use-package sly
  :custom (inferior-lisp-program "sbcl")
  :config
  ;; workaround https://gitlab.com/technomancy/fennel-mode/issues/11
  ;; Sly author claims that this is `fennel-mode' problem, as
  ;; `lisp-mode' is meant strictly for Common Lisp.
  (defun aorst/sly-ignore-fennel (f &rest args)
    "Prevent sly functions from running in `fennel-mode'."
    (unless (or (eq major-mode 'fennel-mode)
                (eq major-mode 'fennel-repl-mode))
      (apply f args)))
  (dolist (f '(sly-mode
               sly-editing-mode))
    (advice-add f :around #'aorst/sly-ignore-fennel))
  (add-hook 'fennel-mode (lambda () (sly-symbol-completion-mode -1))))

(use-package yaml-mode
  :custom (yaml-indent-offset 4))

(use-package sh-script
  :straight nil
  :hook (sh-mode . flycheck-mode))

(use-package perl-mode
  :straight nil
  :hook ((perl-mode . flycheck-mode)))

(use-package lua-mode
  :hook (lua-mode . flycheck-mode)
  :custom (lua-indent-level 2))

(use-package css-mode
  :straight nil
  :custom
  (css-indent-offset 2))

(use-package json-mode
  :hook (json-mode . flycheck-mode)
  :custom (js-indent-level 2))

(use-package scala-mode)

(use-package csv-mode
  :custom (csv-align-max-width 80))

(use-package help
  :straight nil
  :custom (help-window-select t))

(use-package doc-view
  :straight nil
  :custom (doc-view-resolution 192))

(use-package vterm
  :if (bound-and-true-p module-file-suffix)
  :bind (:map vterm-mode-map
         ("<insert>" . ignore)
         ("<f2>" . ignore))
  :custom
  (vterm-always-compile-module t)
  (vterm-environment '("VTERM=1")))

(use-package editorconfig
  :config (editorconfig-mode 1))

(use-package flymake
  :straight nil
  :custom
  (flymake-fringe-indicator-position 'right-fringe))

(use-package flyspell
  :when (or (executable-find "ispell")
            (executable-find "aspell")
            (executable-find "hunspell"))
  :hook (((org-mode git-commit-mode markdown-mode) . flyspell-mode)
         (prog-mode . flyspell-prog-mode)))

(use-package flycheck
  :custom
  (flycheck-indication-mode 'right-fringe)
  (flycheck-display-errors-delay 86400 "86400 seconds is 1 day")
  :config
  (when (fboundp #'define-fringe-bitmap)
    (define-fringe-bitmap 'flycheck-double-exclamation-mark
      (vector #b00000000
              #b00000000
              #b00000000
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b00000000
              #b01100110
              #b01100110
              #b00000000
              #b00000000
              #b00000000))
    (define-fringe-bitmap 'flycheck-exclamation-mark
      (vector #b00000000
              #b00000000
              #b00000000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00000000
              #b00011000
              #b00011000
              #b00000000
              #b00000000
              #b00000000))
    (define-fringe-bitmap 'flycheck-question-mark
      (vector #b00000000
              #b00000000
              #b00000000
              #b00111100
              #b01100110
              #b01100110
              #b01100110
              #b00000110
              #b00001100
              #b00011000
              #b00011000
              #b00000000
              #b00011000
              #b00011000
              #b00000000
              #b00000000
              #b00000000))
    (flycheck-define-error-level 'error
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-double-exclamation-mark
      :fringe-face 'flycheck-fringe-error
      :error-list-face 'flycheck-error-list-error)
    (flycheck-define-error-level 'warning
      :severity 10
      :compilation-level 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-exclamation-mark
      :fringe-face 'flycheck-fringe-warning
      :error-list-face 'flycheck-error-list-warning)
    (flycheck-define-error-level 'info
      :severity -10
      :compilation-level 0
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'flycheck-question-mark
      :fringe-face 'flycheck-fringe-info
      :error-list-face 'flycheck-error-list-info))
  (define-advice flycheck-may-use-echo-area-p (:override () aorst:flycheck-no-echo-or-buffer)
    nil))

(use-package flycheck-package
  :hook ((emacs-lisp-mode . flycheck-mode)
         (emacs-lisp-mode . flycheck-package-setup)))

(use-package hydra)

(use-package smartparens
  :hook (((clojure-mode
           emacs-lisp-mode
           common-lisp-mode
           scheme-mode
           lisp-mode
           racket-mode
           fennel-mode
           cider-repl-mode
           racket-repl-mode
           geiser-repl-mode
           inferior-lisp-mode
           inferior-emacs-lisp-mode
           sly-mrepl-mode)
          . smartparens-strict-mode)
         ((eval-expression-minibuffer-setup
           lisp-data-mode)
          . aorst/minibuffer-enable-sp)
         (prog-mode . smartparens-mode))
  :bind (:map smartparens-mode-map
         ("C-M-q" . sp-indent-defun)
         :map smartparens-strict-mode-map
         (";" . sp-comment))
  :custom
  (sp-highlight-pair-overlay nil)
  (sp-highlight-wrap-overlay nil)
  (sp-highlight-wrap-tag-overlay nil)
  (sp-wrap-respect-direction t)
  (sp-show-pair-delay 0)
  (sp-echo-match-when-invisible nil)
  :config
  (require 'smartparens-config)
  (sp-use-paredit-bindings)
  (define-key smartparens-mode-map (kbd "M-r") 'sp-rewrap-sexp) ; needs to be set manually, because :bind section runs before config
  (add-to-list 'sp-lisp-modes 'fennel-mode t)
  (defun aorst/minibuffer-enable-sp ()
    "Enable `smartparens-strict-mode' in the minibuffer, during `eval-expression'."
    (setq-local comment-start ";")
    (sp-local-pair 'minibuffer-pairs "'" nil :actions nil)
    (sp-local-pair 'minibuffer-pairs "`" nil :actions nil)
    (sp-update-local-pairs 'minibuffer-pairs)
    (smartparens-strict-mode 1))
  (defun aorst/wrap-fix-cursor-position (_ action _)
    "Set cursor position inside expression when wrapping."
    (when (and (eq action 'wrap)
               (eq (point)
                   (marker-position (sp-get sp-last-wrapped-region :beg))))
      (goto-char (sp-get sp-last-wrapped-region :beg-in))))
  (dolist (paren '("(" "[" "{"))
    (sp-pair paren nil :post-handlers '(:add aorst/wrap-fix-cursor-position))))

(use-package vertico
  :hook ((minibuffer-setup . aorst/minibuffer-defer-garbage-collection)
         (minibuffer-exit . aorst/minibuffer-restore-garbage-collection)
         (aorst--theme-change . aorst/vertico-setup-faces))
  :init (vertico-mode)
  (defun aorst/vertico-setup-faces ()
    (let ((mode-line-color (face-attribute 'mode-line :background)))
      (when (fboundp #'doom-darken)
        (set-face-attribute
         'vertico-current nil
         :background (if (aorst/dark-mode-p)
                         (doom-lighten mode-line-color 0.2)
                       (doom-darken mode-line-color 0.1))))))
  (aorst/vertico-setup-faces))

(use-package marginalia
  :init (marginalia-mode))

(use-package consult
  :bind (("C-x C-r" . consult-recent-file))
  :init
  (setq completion-in-region-function #'consult-completion-in-region))

(use-package company
  :bind (:map company-mode-map
         ([remap completion-at-point] . company-complete)
         ("M-/" . company-complete)
         :map company-active-map
         ("TAB" . company-complete-common-or-cycle)
         ("<tab>" . company-complete-common-or-cycle)
         ("<S-Tab>" . company-select-previous)
         ("<backtab>" . company-select-previous)
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous)
         ("C-d" . company-show-doc-buffer)
         ("M-." . company-show-location))
  :hook (after-init . global-company-mode)
  :custom
  (company-idle-delay 0)
  (company-require-match 'never)
  (company-minimum-prefix-length 2)
  (company-tooltip-align-annotations t)
  (company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                       company-preview-frontend
                       company-echo-metadata-frontend))
  (company-backends '(company-capf company-files company-dabbrev-code))
  (company-tooltip-minimum-width 30)
  (company-tooltip-maximum-width 120)
  (company-icon-size aorst--line-pixel-height))

(use-package company-quickhelp
  :hook (company-mode . company-quickhelp-mode)
  :custom
  (company-quickhelp-max-lines 13)
  (company-quickhelp-use-propertized-text t))

(use-package undo-tree
  :commands global-undo-tree-mode
  :custom
  (undo-tree-visualizer-relative-timestamps nil)
  (undo-tree-visualizer-timestamps nil)
  (undo-tree-auto-save-history nil)
  :init (global-undo-tree-mode 1))

(use-package yasnippet)

(use-package with-editor)
(use-package magit
  :hook ((git-commit-mode . flyspell-mode)
         (aorst--theme-change . aorst/magit-setup-diff-faces))
  :bind (("<f12>" . magit-status))
  :custom
  (magit-ediff-dwim-show-on-hunks t)
  (magit-diff-refine-ignore-whitespace t)
  (magit-diff-refine-hunk 'all)
  :config
  (advice-add 'magit-set-header-line-format :override #'ignore)
  (defun aorst/magit-setup-diff-faces ()
    (set-face-attribute 'diff-added nil :foreground nil :background nil :inherit 'magit-diff-added)
    (set-face-attribute 'diff-removed nil :foreground nil :background nil :inherit 'magit-diff-removed)
    (set-face-attribute 'smerge-lower nil :foreground nil :background nil :inherit 'magit-diff-added)
    (set-face-attribute 'smerge-upper nil :foreground nil :background nil :inherit 'magit-diff-removed)
    (dolist (face-reference '((diff-refine-added magit-diff-added-highlight)
                              (diff-refine-removed magit-diff-removed-highlight)
                              (smerge-refined-added magit-diff-added-highlight)
                              (smerge-refined-removed magit-diff-removed-highlight)))
      (apply #'aorst/create-accent-face face-reference)))
  (aorst/magit-setup-diff-faces))

(use-package magit-todos
  :after magit
  :init
  ;; don't break Magit on systems that don't have `nice'
  (unless (executable-find "nice")
    (setq magit-todos-nice nil))
  :config
  (let ((inhibit-message t))
    (magit-todos-mode 1))
  (transient-append-suffix 'magit-status-jump '(0 0 -1)
    '("T " "Todos" magit-todos-jump-to-todos)))

(use-package ediff
  :straight nil
  :hook (ediff-prepare-buffer . outline-show-all)
  :config
  (advice-add 'ediff-window-display-p :override #'ignore)
  :custom
  (ediff-split-window-function 'split-window-horizontally))

(use-package phi-search)
(use-package mc-extras)
(use-package multiple-cursors
  :requires hydra
  :commands (mc/cycle-backward
             mc/cycle-forward)
  :bind (("S-<mouse-1>" . mc/add-cursor-on-click)
         ("M-n" . mc/mark-next-like-this-symbol)
         :map mode-specific-map
         ("m" . hydrant/mc/body)
         :map mc/keymap
         ("<return>" . nil)
         ("C-s" . phi-search)
         ("C-r" . phi-search-backward))
  :config
  (dolist (f '(mc/mark-next-like-this-symbol
               mc/mark-next-like-this-word
               mc/mark-next-lines))
    (advice-add f :after (lambda (&rest _) (mc/cycle-forward))))
  (dolist (f '(mc/mark-previous-like-this-symbol
               mc/mark-previous-like-this-word))
    (advice-add f :after (lambda (&rest _) (mc/cycle-backward))))
  (when (fboundp #'defhydra)
    (defhydra hydrant/mc (:hint nil :color pink)
      "
 ^Select^                       ^Discard^                      ^Edit^               ^Navigate^
 _M-s_: split lines             _M-SPC_:  discard current      _&_: align           _(_: cycle backward
 _s_:   select regexp           _b_:      discard blank lines  _#_: insert numbers  _)_: cycle forward
 _n_:   select next word        _d_:      remove duplicated    ^ ^                  ^ ^
 _M-n_: select next symbol      _q_ or _g_: exit hydrant       ^ ^                  ^ ^
 _p_:   select previous word    ^ ^    ^ ^                     ^ ^                  ^ ^
 _M-p_: select previous symbol  ^ ^                            ^ ^                  ^ ^
 _C_:   select next line"
      ("M-s" mc/edit-ends-of-lines)
      ("s" mc/mark-all-in-region-regexp)
      ("n" mc/mark-next-like-this-word)
      ("M-n" mc/mark-next-like-this-symbol)
      ("p" mc/mark-previous-like-this-word)
      ("M-p" mc/mark-previous-like-this-symbol)
      ("&" mc/vertical-align-with-space)
      ("(" mc/cycle-backward)
      (")" mc/cycle-forward)
      ("M-SPC" mc/remove-current-cursor)
      ("b" mc/remove-cursors-on-blank-lines)
      ("d" mc/remove-duplicated-cursors)
      ("C" mc/mark-next-lines)
      ("#" mc/insert-numbers)
      ("q" mc/remove-duplicated-cursors :exit t)
      ("g" mc/remove-duplicated-cursors :exit t)
      ("C-g" keyboard-quit :exit t))))

(use-package expand-region
  :bind (:map mode-specific-map
         ("e" . hydrant/er/body))
  :requires hydra
  :config
  (defun aorst/er-exit ()
    (interactive)
    (deactivate-mark t))
  (defhydra hydrant/er (:color pink :hint nil)
    "
 ^Mark^              ^Expand or Discard^
 _(_: inside pairs   _e_:   ^ ^  expand region
 _)_: around pairs   _r_:   ^ ^  reduce region
 _'_: inside quotes  _g_ or _q_: exit hydrant
 _\"_: around quotes ^ ^    ^ ^
 _p_: paragraph      ^ ^    ^ ^"
    ("e" er/expand-region)
    ("r" er/contract-region)
    ("p" er/mark-paragraph)
    ("(" er/mark-inside-pairs)
    (")" er/mark-outside-pairs)
    ("'" er/mark-inside-quotes)
    ("\"" er/mark-outside-quotes)
    ("g" ignore :exit t)
    ("q" ignore :exit t)
    ("C-g" aorst/er-exit :exit t)))

(use-package lsp-mode
  :hook (((rust-mode
           c-mode
           c++-mode
           elixir-mode
           clojure-mode
           clojurec-mode
           clojurescript-mode)
          . aorst/setup-lsp)
         (lsp-mode . yas-minor-mode))
  :custom-face
  (lsp-modeline-code-actions-face ((t (:inherit mode-line))))
  :custom
  ;; general settings
  (lsp-keymap-prefix "C-c l")
  (lsp-completion-provider :capf)
  (lsp-diagnostics-provider :auto)
  (lsp-session-file (expand-file-name ".lsp-session" user-emacs-directory))
  (lsp-log-io nil)
  (lsp-keep-workspace-alive nil)
  ;; DAP
  (lsp-enable-dap-auto-configure nil)
  ;; UI
  (lsp-enable-links nil)
  (lsp-headerline-breadcrumb-enable nil)
  (lsp-modeline-code-actions-enable nil)
  ;; semantic code features
  (lsp-enable-folding nil)
  (lsp-enable-indentation nil)
  (lsp-enable-semantic-highlighting nil)
  (lsp-enable-symbol-highlighting nil)
  (lsp-enable-on-type-formatting nil)
  (lsp-enable-text-document-color nil)
  ;; completion
  (lsp-completion-show-kind nil)
  ;; lens
  (lsp-lens-enable t)
  (lsp-lens-place-position 'end-of-line)
  ;; rust
  (lsp-rust-clippy-preference "on")
  (lsp-rust-server 'rust-analyzer)
  :config
  (defun aorst/setup-lsp ()
    (when (memq major-mode '(clojure-mode
                             clojurec-mode
                             clojurescript-mode))
      (setq-local lsp-diagnostics-provider :none))
    (lsp)))

(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode
  :bind (:map lsp-ui-mode-map
         ("M-." . lsp-ui-peek-find-definitions)
         ("M-S-." . lsp-ui-peek-find-references))
  :custom
  (lsp-ui-doc-border (face-attribute 'window-divider :foreground))
  (lsp-ui-sideline-enable nil)
  (lsp-ui-doc-enable nil)
  (lsp-ui-imenu-enable t)
  (lsp-ui-doc-delay 2 "higher than eldoc delay")
  (lsp-ui-doc-max-width 1000)
  (lsp-ui-doc-show-with-cursor nil)
  (lsp-ui-doc-show-with-mouse t)
  (lsp-ui-doc-position 'at-point)
  (lsp-ui-doc-enhanced-markdown nil)
  :custom-face
  (lsp-ui-peek-highlight ((t (:foreground unspecified
                              :background unspecified
                              :box unspecified
                              :inherit lsp-face-highlight-textual))))
  :config
  (lsp-ui-mode))

(use-package lsp-java
  :when (file-exists-p "/usr/lib/jvm/java-11-openjdk/bin/java")
  :custom (lsp-java-java-path "/usr/lib/jvm/java-11-openjdk/bin/java"))

(use-package project
  :straight nil
  :config
  (defvar aorst--project-root-markers
    '("Cargo.toml" "compile_commands.json" "compile_flags.txt" "project.clj" ".git" "deps.edn")
    "Files or directories that indicate the root of a project.")
  (defun aorst/project-root-p (path)
    "Check if current PATH has any of project root markers."
    (memq t (mapcar (lambda (file)
                      (file-exists-p (concat path file)))
                    aorst--project-root-markers)))
  (defun aorst/project-find-root (path)
    "Recursive search in PATH for root markers."
    (cond
     ((aorst/project-root-p path) (cons 'transient path))
     ((equal "/" path) nil)
     (t (aorst/project-find-root
         (file-name-directory
          (directory-file-name path))))))
  (add-to-list 'project-find-functions #'aorst/project-find-root))

(use-package server
  :straight nil
  :config
  (unless (server-running-p)
    (server-start)))

(use-package edit-indirect
  :hook ((edit-indirect-after-creation . aorst/edit-indirect-header-line-setup))
  :bind (:map edit-indirect-mode-map
         ("C-c C-c" . edit-indirect-commit)
         ("C-c C-k" . edit-indirect-abort)
         ("C-c '" . nil))
  :config
  (defun aorst/edit-indirect-header-line-setup ()
    (setq-local
     header-line-format
     (substitute-command-keys
      "\\<edit-indirect-mode-map>Edit, then exit with `\\[edit-indirect-commit]' or abort with `\\[edit-indirect-abort]'"))))

(use-package separedit
  :hook (separedit-buffer-creation . aorst/separedit-header-line-setup)
  :bind (:map prog-mode-map
         ("C-c '" . separedit)
         :map edit-indirect-mode-map
         ("C-c '" . separedit))
  :custom
  (separedit-default-mode 'gfm-mode)
  :config
  (defun aorst/separedit-header-line-setup ()
    (setq-local
     header-line-format
     (substitute-command-keys
      "\\<edit-indirect-mode-map>Edit, then exit with `\\[separedit-commit]' or abort with `\\[edit-indirect-abort]'"))))

(use-package recentf
  :straight nil
  :config
  (add-to-list 'recentf-exclude "\\.gpg\\")
  (recentf-mode))

(use-package dumb-jump
  :custom
  (dumb-jump-prefer-searcher 'rg)
  (dumb-jump-selector 'completing-read)
  :config
  (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate))

(use-package which-key
  :config (which-key-mode t))

(use-package gcmh
  :config (gcmh-mode t))

(use-package paren
  :straight nil
  :hook (prog-mode . show-paren-mode)
  :custom (show-paren-delay 0))

(use-package xref
  :straight nil
  :config
  (when (featurep 'treemacs)
    (define-advice xref-push-marker-stack (:around (fn &optional m) aorst:remove-treemacs-from-xref-marker-stack)
      (let ((m (or m (point-marker))))
        (when (buffer-local-value 'treemacs--in-this-buffer (marker-buffer m))
          (with-current-buffer (window-buffer (next-window (selected-window) nil nil))
            (setf m (point-marker))))
        (funcall fn m)))))

(use-package vc-hooks
  :straight nil
  :custom (vc-follow-symlinks t))

(use-package quail
  :straight nil
  :config
  (define-advice quail-setup-completion-buf (:after () aorst:hide-quail-buffer)
    (with-current-buffer quail-completion-buf
      (when (string= "*Quail Completions*" (buffer-name))
        (rename-buffer " *Quail Completions*")))))

(use-package isayt
  :straight (:host gitlab
             :repo "andreyorst/isayt.el"
             :branch "main")
  :hook ((paredit-mode smartparens-strict-mode) . isayt-mode))

(use-package eldoc
  :straight nil
  :custom (eldoc-echo-area-use-multiline-p nil))

(use-package autorevert
  :straight nil
  :hook (after-init . global-auto-revert-mode))

(use-package hl-todo
  :hook (prog-mode . hl-todo-mode))

(use-package jdecomp
  :when (file-exists-p (expand-file-name "~/.local/bin/fernflower.jar"))
  :hook (archive-mode . jdecomp-mode)
  :custom
  (jdecomp-decompiler-type 'fernflower)
  (jdecomp-decompiler-paths '((fernflower . "~/.local/bin/fernflower.jar"))))

(defmacro aorst/add-compilation-error-syntax (name regexp file line &optional col level)
  "Register new compilation error syntax.

Add NAME symbol to `compilation-error-regexp-alist', and then add
REGEXP FILE LINE and optional COL LEVEL info to
`compilation-error-regexp-alist-alist'."
  (declare (indent 1))
  `(progn (add-to-list 'compilation-error-regexp-alist ',name)
          (add-to-list 'compilation-error-regexp-alist-alist
                       '(,name ,regexp ,file ,line ,col ,level))))

(use-package compile
  :straight nil
  :custom
  (compilation-scroll-output 'first-error)
  :config
  (aorst/add-compilation-error-syntax kaocha-tap
    "^not ok.*(\\([^:]*\\):\\([0-9]*\\))$"
    (1 "src/%s" "test/%s") 2)
  (aorst/add-compilation-error-syntax kaocha-fail
    ".*FAIL in.*(\\([^:]*\\):\\([0-9]*\\))$"
    (1 "src/%s" "test/%s") 2)
  (aorst/add-compilation-error-syntax lua-stacktrace
    "^[[:space:]]+\\([^:]+\\):\\([0-9]+\\):[[:space:]]+in"
    1 2))

(use-package isearch
  :straight nil
  :bind (:map isearch-mode-map
         ("<backspace>" . isearch-del-char)
         ("<left>" . aorst/isearch-backward-char)
         :map minibuffer-local-isearch-map
         ("<right>" . forward-char))
  :config
  (defun aorst/isearch-backward-char (&optional n)
    (interactive)
    (isearch-edit-string)
    (backward-char n)))

(use-package esh-mode
  :straight nil
  :custom (eshell-scroll-show-maximum-output nil))

(use-package vlf-setup
  :straight vlf
  :custom (vlf-tune-enabled nil))

(use-package dired
  :straight nil
  :custom
  (dired-listing-switches "-al --group-directories-first"))

(provide 'init)
;;; init.el ends here
