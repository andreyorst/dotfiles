;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-
;;;
;;; Commentary:
;;; Emacs config by Andrey Orst.
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in README.org at `user-emacs-directory'
;;;
;;; Code:

(unless (featurep 'early-init)
  (load (expand-file-name "early-init" user-emacs-directory)))

(require 'use-package)

(use-package startup
  :no-require t
  :straight nil
  :custom
  (user-mail-address "andreyorst@gmail.com")
  (user-full-name "Andrey Orst"))

(setq ring-bell-function 'ignore)

(use-package files
  :straight nil
  :custom
  (backup-by-copying t)
  (create-lockfiles nil)
  (backup-directory-alist '(("." . "~/.cache/emacs-backups")))
  (auto-save-file-name-transforms '((".*" "~/.cache/emacs-backups/" t))))

(use-package subr
  :no-require t
  :straight nil
  :init
  (fset 'yes-or-no-p 'y-or-n-p))

(add-hook 'after-init-hook (lambda () (setq echo-keystrokes 5)))

(global-unset-key (kbd "S-<down-mouse-1>"))
(global-unset-key (kbd "<mouse-3>"))
(global-set-key [mouse-3] menu-bar-edit-menu)
(global-unset-key (kbd "S-<mouse-3>"))

(setq-default mouse-wheel-progressive-speed nil
              auto-window-vscroll nil
              mouse-highlight nil
              hscroll-step 1
              hscroll-margin 1
              scroll-step 10)

(unless (display-graphic-p)
  (xterm-mouse-mode t))

(setq-default indent-tabs-mode nil)

(use-package cus-edit
  :straight nil
  :custom
  (custom-file (expand-file-name "custom.el" user-emacs-directory))
  :init
  (load custom-file :noerror))

(defvar disabled-commands (expand-file-name "disabled.el" user-emacs-directory)
  "File to store disabled commands, that were enabled permamently.")
(defadvice en/disable-command (around put-in-custom-file activate)
  "Put declarations in disabled.el."
  (let ((user-init-file disabled-commands))
    ad-do-it))
(load disabled-commands :noerror)

(use-package savehist
  :straight nil
  :config (savehist-mode 1))

(use-package mule-cmds
  :no-require t
  :straight nil
  :custom
  (default-input-method 'russian-computer))

(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

(use-package startup
  :no-require t
  :straight nil
  :custom
  (initial-major-mode 'fundamental-mode)
  (initial-scratch-message ""))

(use-package delsel
  :straight nil
  :init
  (delete-selection-mode t))

(use-package simple
  :straight nil
  :bind (("C-w" . aorst/kill-region-or-word)
         ("C-x C-x" . aorst/exchange-point-and-mark)
         ("C-o" . aorst/newline-below)
         ("C-S-o" . aorst/newline-above)
         ("M-z" . zap-up-to-char)
         ("M-S-z" . zap-to-char))
  :hook ((before-save . delete-trailing-whitespace)
         (overwrite-mode . aorst/overwrite-set-cursor-shape))
  :init
  (defun aorst/kill-region-or-word (arg)
    (interactive "*p")
    (if (and transient-mark-mode
             mark-active)
        (kill-region (region-beginning) (region-end))
      (backward-kill-word arg)))
  (defun aorst/exchange-point-and-mark (arg)
   (interactive "*p")
   (when (and transient-mark-mode
              mark-active)
     (exchange-point-and-mark)))
  (defun aorst/newline-below ()
    (interactive)
    (end-of-line)
    (newline-and-indent))
  (defun aorst/newline-above ()
    (interactive)
    (back-to-indentation)
    (newline-and-indent)
    (forward-line -1)
    (indent-according-to-mode))
  (defun aorst/overwrite-set-cursor-shape ()
    (when (display-graphic-p)
      (setq cursor-type (if overwrite-mode 'box 'bar)))))

(setq-default truncate-lines t)

(defun aorst/real-buffer-p (&optional buffer)
  "Determines whether BUFFER is real."
  (not (or (string-match-p
            (regexp-opt '("*Treemacs"
                          "*vterm*"
                          " *Minibuf"
                          " *Echo Area"
                          "*Process List*"
                          " *LV*"))
            (buffer-name buffer))
           (minibufferp))))

(defun aorst/escape ()
  "Quit in current context.

When there is an active minibuffer and we are not inside it close
it.  When we are inside the minibuffer use the regular
`minibuffer-keyboard-quit' which quits any active region before
exiting.  When there is no minibuffer `keyboard-quit' unless we
are defining or executing a macro."
  (interactive)
  (cond ((active-minibuffer-window)
         (if (minibufferp)
             (minibuffer-keyboard-quit)
           (abort-recursive-edit)))
        ((bound-and-true-p iedit-mode)
         (iedit-quit))
        (t
         (unless (or defining-kbd-macro
                     executing-kbd-macro)
           (keyboard-quit))))
  (message this-command))
(global-set-key [remap keyboard-quit] #'aorst/escape)

(defun aorst/font-installed-p (font-name)
  "Check if font with FONT-NAME is available."
  (find-font (font-spec :name font-name)))

(defun aorst/indent-buffer ()
  "Indent whole buffer."
  (interactive)
  (save-excursion
    (save-restriction
      (indent-region (point-min) (point-max)))))

(global-set-key (kbd "C-c C-M-f") #'aorst/indent-buffer)

(use-package startup
  :no-require t
  :straight nil
  :custom
  (inhibit-splash-screen t))

(tooltip-mode -1)
(fset 'menu-bar-open nil)

(when window-system
  (scroll-bar-mode -1)
  (tool-bar-mode -1))

(when window-system
  (setq-default cursor-type 'bar
                cursor-in-non-selected-windows nil))

(cond ((aorst/font-installed-p "JetBrainsMono")
       (set-face-attribute 'default nil :font "JetBrainsMono 10"))
      ((aorst/font-installed-p "Hack")
       (set-face-attribute 'default nil :font "Hack 10"))
      ((aorst/font-installed-p "Source Code Pro")
       (set-face-attribute 'default nil :font "Source Code Pro 10")))

(when (aorst/font-installed-p "JetBrainsMono")
  (let ((ligatures `((?-  ,(regexp-opt '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->")))
                     (?/  ,(regexp-opt '("///" "/=" "/==" "/>" "//"))) ;; "/*"
                     (?*  ,(regexp-opt '("*>"))) ;; "***" "*/"
                     (?<  ,(regexp-opt '("<-" "<<-" "<=>" "<=" "<|" "<||" "<|||" "<|>" "<:" "<>" "<-<"
                                           "<<<" "<==" "<<=" "<=<" "<==>" "<-|" "<<" "<~>" "<=|" "<~~" "<~"
                                           "<$>" "<$" "<+>" "<+" "</>" "</" "<*" "<*>" "<->" "<!--")))
                     (?:  ,(regexp-opt '(":>" ":<" ":::" "::" ":?" ":?>" ":=" "::=")))
                     (?=  ,(regexp-opt '("=>>" "==>" "=/=" "=!=" "=>" "===" "=:=" "==")))
                     (?!  ,(regexp-opt '("!==" "!!" "!=")))
                     (?>  ,(regexp-opt '(">]" ">:" ">>-" ">>=" ">=>" ">>>" ">-" ">=")))
                     (?&  ,(regexp-opt '("&&&" "&&")))
                     (?|  ,(regexp-opt '("|||>" "||>" "|>" "|]" "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||")))
                     (?.  ,(regexp-opt '(".." ".?" ".=" ".-" "..<" "...")))
                     (?+  ,(regexp-opt '("+++" "+>" "++")))
                     (?\[ ,(regexp-opt '("[||]" "[<" "[|")))
                     (?\{ ,(regexp-opt '("{|")))
                     (?\? ,(regexp-opt '("??" "?." "?=" "?:")))
                     (?#  ,(regexp-opt '("####" "###" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" "##")))
                     (?\; ,(regexp-opt '(";;")))
                     (?_  ,(regexp-opt '("_|_" "__")))
                     (?~  ,(regexp-opt '("~~" "~~>" "~>" "~-" "~@")))
                     (?$  ,(regexp-opt '("$>")))
                     (?^  ,(regexp-opt '("^=")))
                     (?\] ,(regexp-opt '("]#"))))))
    (dolist (char-regexp ligatures)
      (apply (lambda (char regexp)
               (set-char-table-range
                composition-function-table
                char `([,regexp 0 font-shape-gstring])))
             char-regexp))))

(use-package composite
  :straight nil
  :hook (prog-mode . auto-composition-mode)
  :init (global-auto-composition-mode -1))

(use-package all-the-icons
  :config
  (when (and (not (aorst/font-installed-p "all-the-icons"))
             (window-system))
    (all-the-icons-install-fonts t)))

(use-package doom-themes
  :custom
  (doom-themes-enable-bold t)
  (doom-themes-enable-italic t)
  :custom-face
  (highlight ((t (:foreground unspecified
                  :distant-foreground unspecified
                  :background unspecified))))
  :config
  (load-theme 'doom-one t))

(use-package solaire-mode
  :straight (:host github
             :repo "hlissner/emacs-solaire-mode")
  :commands (solaire-global-mode
             solaire-mode-swap-bg
             turn-on-solaire-mode
             solaire-mode-in-minibuffer
             solaire-mode-reset)
  :hook (((after-revert
           change-major-mode
           org-src-mode) . turn-on-solaire-mode)
         (snippet-mode . solaire-mode))
  :custom
  (solaire-mode-real-buffer-fn #'aorst/real-buffer-p)
  :config
  (solaire-global-mode 1)

  (with-no-warnings
    (if (boundp 'after-focus-change-function)
        (add-function :after after-focus-change-function #'solaire-mode-reset)
      (add-hook 'focus-in-hook  #'solaire-mode-reset)))
  (defun aorst/create-image-with-background-color (args)
    "Specify background color of Org-mode inline image through modify `ARGS'."
    (apply (lambda (file type data-p &rest props)
             (append (list file type data-p)
                     (list :background (face-attribute
                                        (or (cadr (assq 'default face-remapping-alist))
                                            'default)
                                        :background nil t))
                     props))
           args))
  (advice-add 'create-image :filter-args #'aorst/create-image-with-background-color)
  (solaire-mode-swap-bg))

(setq-default column-number-mode t
              line-number-mode t
              size-indication-mode nil
              mode-line-position nil
              mode-line-percent-position nil
              mode-line-in-non-selected-windows nil)

(dolist (face '(mode-line mode-line-inactive))
  (set-face-attribute face nil
                      :box nil))

(defun aorst/mode-line-line-encoding ()
  (let ((eol (coding-system-eol-type buffer-file-coding-system)))
    (propertize
     (pcase eol
       (0 "LF  ")
       (1 "CRLF  ")
       (2 "CR  ")
       (_ ""))
     'help-echo (format "End-of-line style: %s"
                        (pcase eol
                          (0 "Unix-style LF (\\n)")
                          (1 "DOS-style CRLF (\\r\\n)")
                          (2 "Mac-style CR (\\r)")
                          (_ "Undecided")))
     'local-map (let ((map (make-sparse-keymap)))
                  (define-key map [mode-line mouse-1] 'mode-line-change-eol)
                  map))))

(defun aorst/mode-line-buffer-name ()
  (let* ((name (buffer-name))
         (match (string-match " " name)))
    (if (and match (= match 0)) "" name)))

(defun aorst/mode-line-buffer-encoding ()
  (propertize
   (let ((sys (coding-system-plist buffer-file-coding-system)))
     (if (memq (plist-get sys :category)
               '(coding-category-undecided coding-category-utf-8))
         "UTF-8  "
       (concat (upcase (symbol-name (plist-get sys :name))) "  ")))
   'help-echo 'mode-line-mule-info-help-echo
   'local-map mode-line-coding-system-map))

(defun aorst/mode-line-git-branch ()
  (when (and vc-mode buffer-file-name)
    (let* ((str (when vc-display-status
                  (substring
                   vc-mode
                   (+ (if (eq (vc-backend buffer-file-name) 'Hg) 2 3)
                      2)))))
      (when str
        (concat (if (char-displayable-p ?) "" "@") " " str "  ")))))

(defun aorst/mode-line-buffer-modified ()
  (if (and buffer-file-name (buffer-modified-p))
      (if (char-displayable-p ?💾) " 💾  " "*  ")
    "  "))

(defun aorst/mode-line-readonly ()
  (if buffer-read-only
      (propertize
       (if (char-displayable-p ?🔒) "🔒  " "RO  ")
       'help-echo "Make file writable"
       'local-map (let ((map (make-sparse-keymap)))
                    (define-key map [mode-line mouse-1] 'mode-line-toggle-read-only)
                    map))
    (propertize
     (if (char-displayable-p ?🔓) "🔓  " "RW  ")
     'help-echo "Make file read only"
     'local-map (let ((map (make-sparse-keymap)))
                  (define-key map [mode-line mouse-1] 'mode-line-toggle-read-only)
                  map))))

(defun aorst/mode-line-indent-mode ()
  (propertize
   (if indent-tabs-mode
       "Tabs  "
     (if (boundp 'editorconfig-indentation-alist)
         (if-let ((indent-level (symbol-value (cadr (assoc major-mode editorconfig-indentation-alist)))))
             (format "%d Spaces  " indent-level)
           "Spaces  ")
       "Spaces  "))
   'help-echo "Indentation method"))

(defun aorst/mode-line-line-column ()
  (propertize
   "%C:%l  "
   'help-echo "goto line"
   'local-map (let ((map (make-sparse-keymap)))
                (define-key map [mode-line mouse-1] #'goto-line)
                map)))

(defun aorst/mode-line-mode-name ()
  (propertize
   (concat (format-mode-line mode-name) "  ")
   'help-echo (format "Major-mode: %s" (format-mode-line mode-name))))

(use-package mini-modeline
  :straight (:host github
             :repo "kiennq/emacs-mini-modeline")
  :custom
  (mini-modeline-display-gui-line nil)
  (mini-modeline-r-format
   '(:eval (string-trim-right
            (concat
             (aorst/mode-line-buffer-name)
             (aorst/mode-line-buffer-modified)
             (aorst/mode-line-line-column)
             (aorst/mode-line-line-encoding)
             (aorst/mode-line-buffer-encoding)
             (aorst/mode-line-indent-mode)
             (aorst/mode-line-mode-name)
             (aorst/mode-line-git-branch)
             (aorst/mode-line-readonly)))))
  :config
  (mini-modeline-mode t))

(when window-system
  (use-package frame
    :straight nil
    :custom
    (window-divider-default-bottom-width 1)
    (window-divider-default-right-width 1)
    (window-divider-default-places t)
    :config
    (window-divider-mode t)
    (set-face-attribute 'window-divider nil
                        :foreground (face-attribute
                                     'mode-line-inactive :background))))

(setq-default frame-title-format '("%b — Emacs"))

(use-package treemacs
  :commands (treemacs-follow-mode
             treemacs-filewatch-mode
             treemacs-fringe-indicator-mode
             treemacs-load-theme)
  :bind (("<f7>" . treemacs)
         ("<f8>" . treemacs-select-window)
         :map treemacs-mode-map
         ([C-tab] . aorst/treemacs-expand-all-projects))
  :hook ((after-init . aorst/treemacs-after-init-setup)
         (treemacs-mode . aorst/after-treemacs-setup)
         (treemacs-switch-workspace . aorst/treemacs-expand-all-projects)
         (treemacs-switch-workspace . treemacs-set-fallback-workspace)
         (treemacs-mode . aorst/treemacs-setup-title))
  :custom-face
  (treemacs-fringe-indicator-face ((t (:inherit font-lock-doc-face))))
  :custom
  (treemacs-width 32)
  (treemacs-is-never-other-window t)
  (treemacs-space-between-root-nodes nil)
  (treemacs-indentation 2)
  :config
  (use-package treemacs-magit)
  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode t)
  (set-face-attribute 'treemacs-root-face nil
                      :foreground (face-attribute 'default :foreground)
                      :height 1.0
                      :weight 'normal)
  (defun aorst/treemacs-ignore (file _)
    (or (s-ends-with? ".elc" file)
        (s-ends-with? ".o" file)
        (s-ends-with? ".a" file)
        (string= file ".svn")))
  (add-to-list 'treemacs-ignored-file-predicates #'aorst/treemacs-ignore)
  (treemacs-create-theme "Atom"
    :config
    (progn
      (treemacs-create-icon
       :icon (format " %s\t"
                     (all-the-icons-octicon
                      "repo"
                      :v-adjust -0.1
                      :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions (root))
      (treemacs-create-icon
       :icon (format "%s\t%s\t"
                     (all-the-icons-octicon
                      "chevron-down"
                      :height 0.75
                      :v-adjust 0.1
                      :face '(:inherit font-lock-doc-face :slant normal))
                     (all-the-icons-octicon
                      "file-directory"
                      :v-adjust 0
                      :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions (dir-open))
      (treemacs-create-icon
       :icon (format "%s\t%s\t"
                     (all-the-icons-octicon
                      "chevron-right"
                      :height 0.75
                      :v-adjust 0.1
                      :face '(:inherit font-lock-doc-face :slant normal))
                     (all-the-icons-octicon
                      "file-directory"
                      :v-adjust 0
                      :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions (dir-closed))
      (treemacs-create-icon
       :icon (format "%s\t%s\t"
                     (all-the-icons-octicon
                      "chevron-down"
                      :height 0.75
                      :v-adjust 0.1
                      :face '(:inherit font-lock-doc-face :slant normal))
                     (all-the-icons-octicon
                      "package"
                      :v-adjust 0
                      :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions (tag-open))
      (treemacs-create-icon
       :icon (format "%s\t%s\t"
                     (all-the-icons-octicon
                      "chevron-right"
                      :height 0.75
                      :v-adjust 0.1
                      :face '(:inherit font-lock-doc-face :slant normal))
                     (all-the-icons-octicon
                      "package"
                      :v-adjust 0
                      :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions (tag-closed))
      (treemacs-create-icon
       :icon (format "%s\t"
                     (all-the-icons-octicon
                      "tag"
                      :height 0.9
                      :v-adjust 0
                      :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions (tag-leaf))
      (treemacs-create-icon
       :icon (format "%s\t"
                     (all-the-icons-octicon
                      "flame"
                      :v-adjust 0
                      :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions (error))
      (treemacs-create-icon
       :icon (format "%s\t"
                     (all-the-icons-octicon
                      "stop"
                      :v-adjust 0
                      :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions (warning))
      (treemacs-create-icon
       :icon (format "%s\t"
                     (all-the-icons-octicon
                      "info"
                      :height 0.75
                      :v-adjust 0.1
                      :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions (info))
      (treemacs-create-icon
       :icon (format "  %s\t"
                     (all-the-icons-octicon
                      "file-media"
                      :v-adjust 0
                      :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions ("png" "jpg" "jpeg" "gif" "ico" "tif" "tiff" "svg" "bmp"
                    "psd" "ai" "eps" "indd" "mov" "avi" "mp4" "webm" "mkv"
                    "wav" "mp3" "ogg" "midi"))
      (treemacs-create-icon
       :icon (format "  %s\t"
                     (all-the-icons-octicon
                      "file-code"
                      :v-adjust 0
                      :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions ("yml" "yaml" "sh" "zsh" "fish" "c" "h" "cpp" "cxx" "hpp"
                    "tpp" "cc" "hh" "hs" "lhs" "cabal" "py" "pyc" "rs" "el"
                    "elc" "clj" "cljs" "cljc" "ts" "tsx" "vue" "css" "html"
                    "htm" "dart" "java" "kt" "scala" "sbt" "go" "js" "jsx"
                    "hy" "json" "jl" "ex" "exs" "eex" "ml" "mli" "pp" "dockerfile"
                    "vagrantfile" "j2" "jinja2" "tex" "racket" "rkt" "rktl" "rktd"
                    "scrbl" "scribble" "plt" "makefile" "elm" "xml" "xsl" "rb"
                    "scss" "lua" "lisp" "scm" "sql" "toml" "nim" "pl" "pm" "perl"
                    "vimrc" "tridactylrc" "vimperatorrc" "ideavimrc" "vrapperrc"
                    "cask" "r" "re" "rei" "bashrc" "zshrc" "inputrc" "editorconfig"
                    "gitconfig"))
      (treemacs-create-icon
       :icon (format "  %s\t"
                     (all-the-icons-octicon
                      "book"
                      :v-adjust 0
                      :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions ("lrf" "lrx" "cbr" "cbz" "cb7" "cbt" "cba" "chm" "djvu"
                    "doc" "docx" "pdb" "pdb" "fb2" "xeb" "ceb" "inf" "azw"
                    "azw3" "kf8" "kfx" "lit" "prc" "mobi" "pkg" "opf" "txt"
                    "pdb" "ps" "rtf" "pdg" "xml" "tr2" "tr3" "oxps" "xps"))
      (treemacs-create-icon
       :icon (format "  %s\t" (all-the-icons-octicon
                               "file-text"
                               :v-adjust 0
                               :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions ("md" "markdown" "rst" "log" "org" "txt"
                    "CONTRIBUTE" "LICENSE" "README" "CHANGELOG"))
      (treemacs-create-icon
       :icon (format "  %s\t" (all-the-icons-octicon
                               "file-binary"
                               :v-adjust 0
                               :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions ("exe" "dll" "obj" "so" "o" "out"))
      (treemacs-create-icon
       :icon (format "  %s\t" (all-the-icons-octicon
                               "file-pdf"
                               :v-adjust 0
                               :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions ("pdf"))
      (treemacs-create-icon
       :icon (format "  %s\t" (all-the-icons-octicon
                               "file-zip"
                               :v-adjust 0
                               :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions ("zip" "7z" "tar" "gz" "rar" "tgz"))
      (treemacs-create-icon
       :icon (format "  %s\t" (all-the-icons-octicon
                               "file-text"
                               :v-adjust 0
                               :face '(:inherit font-lock-doc-face :slant normal)))
       :extensions (fallback))))
  :init
  (defun aorst/treemacs-expand-all-projects (&optional _)
    "Expand all projects."
    (interactive)
    (save-excursion
      (treemacs--forget-last-highlight)
      (dolist (project (treemacs-workspace->projects (treemacs-current-workspace)))
        (-when-let (pos (treemacs-project->position project))
          (when (eq 'root-node-closed (treemacs-button-get pos :state))
            (goto-char pos)
            (treemacs--expand-root-node pos)))))
    (treemacs--maybe-recenter 'on-distance))
  (defun aorst/treemacs-variable-pitch-labels (&rest _)
    (dolist (face '(treemacs-file-face
                    treemacs-root-face
                    treemacs-tags-face
                    treemacs-directory-face
                    treemacs-directory-collapsed-face
                    treemacs-term-node-face
                    treemacs-help-title-face
                    treemacs-help-column-face
                    treemacs-git-added-face
                    treemacs-git-ignored-face
                    treemacs-git-renamed-face
                    treemacs-git-conflict-face
                    treemacs-git-modified-face
                    treemacs-git-unmodified-face
                    treemacs-git-untracked-face
                    treemacs-root-unreadable-face
                    treemacs-root-remote-face
                    treemacs-root-remote-unreadable-face
                    treemacs-root-remote-disconnected-face
                    treemacs-fringe-indicator-face
                    treemacs-on-failure-pulse-face
                    treemacs-on-success-pulse-face))
      (let ((faces (face-attribute face :inherit nil)))
        (set-face-attribute
         face nil :inherit
         `(variable-pitch ,@(delq 'unspecified (if (listp faces) faces (list faces))))))))
  (defun aorst/treemacs-after-init-setup ()
    "Set treemacs theme, open treemacs, and expand all projects."
    (when (display-graphic-p)
      (treemacs-load-theme "Atom"))
    (setq treemacs-collapse-dirs 0)
    (treemacs)
    (aorst/treemacs-expand-all-projects)
    (windmove-right))
  (defun aorst/after-treemacs-setup ()
    "Set treemacs buffer common settings."
    (setq tab-width 1
          mode-line-format nil
          line-spacing 5)
    (setq-local scroll-step 1)
    (setq-local scroll-conservatively 10000)
    (aorst/treemacs-variable-pitch-labels))
  (defun aorst/treemacs-setup-title ()
    (let ((bg (face-attribute 'default :background))
          (fg (face-attribute 'default :foreground)))
      (face-remap-add-relative 'header-line
                               :background bg :foreground fg
                               :box `(:line-width ,(/ (line-pixel-height) 2) :color ,bg)))
    (setq header-line-format
          '((:eval
             (let* ((text (treemacs-workspace->name (treemacs-current-workspace)))
                    (extra-align (+ (/ (length text) 2) 1))
                    (width (- (/ (window-width) 2) extra-align)))
               (concat (make-string width ?\s) text)))))))

(use-package minions
  :commands minions-mode
  :init (minions-mode 1))

(use-package uniquify
  :straight nil
  :custom (uniquify-buffer-name-style 'forward))

(use-package tab-line
  :straight nil
  :unless (version< emacs-version "27")
  :hook (after-init . global-tab-line-mode)
  :config
  (defun tab-line-close-tab (&optional e)
    "Close the selected tab.

If tab is presented in another window, close the tab by using
`bury-buffer` function.  If tab is unique to all existing
windows, kill the buffer with `kill-buffer` function.  Lastly, if
no tabs left in the window, it is deleted with `delete-window`
function."
    (interactive "e")
    (let* ((posnp (event-start e))
           (window (posn-window posnp))
           (buffer (get-pos-property 1 'tab (car (posn-string posnp)))))
      (with-selected-window window
        (let ((tab-list (tab-line-tabs-window-buffers))
              (buffer-list (flatten-list
                            (seq-reduce (lambda (list window)
                                          (select-window window t)
                                          (cons (tab-line-tabs-window-buffers) list))
                                        (window-list) nil))))
          (select-window window)
          (if (> (seq-count (lambda (b) (eq b buffer)) buffer-list) 1)
              (progn
                (if (eq buffer (current-buffer))
                    (bury-buffer)
                  (set-window-prev-buffers window (assq-delete-all buffer (window-prev-buffers)))
                  (set-window-next-buffers window (delq buffer (window-next-buffers))))
                (unless (cdr tab-list)
                  (ignore-errors (delete-window window))))
            (and (kill-buffer buffer)
                 (unless (cdr tab-list)
                   (ignore-errors (delete-window window)))))))))


  (defcustom tab-line-tab-min-width 10
    "Minimum width of a tab in characters."
    :type 'integer
    :group 'tab-line)


  (defcustom tab-line-tab-max-width 30
    "Maximum width of a tab in characters."
    :type 'integer
    :group 'tab-line)

  (defcustom tab-line-ellipsis-string "…"
    "String for indicating truncated names"
    :type 'string
    :group 'tab-line)

  (defun aorst/tab-line--tab-width (window-width tab-amount)
    "Calculate width of single tab dividing WINDOW-WIDTH by TAB-AMOUNT."
    (let* ((close-button-size
            (if tab-line-close-button-show
                (length (substring-no-properties tab-line-close-button)) 0))
           (tab-width (/ window-width tab-amount)))
      (- (cond ((< window-width 0)
                tab-line-tab-min-width)
               ((>= tab-width tab-line-tab-max-width)
                tab-line-tab-max-width)
               ((< tab-width tab-line-tab-min-width)
                tab-line-tab-min-width)
               (t tab-width))
         close-button-size)))

  (defun aorst/tab-line--max-width (window)
    "Calculate free width of the WINDOW.

Free width means amount of space we can use to display tabs
without truncation."
    (- (window-width window)
       (length (substring-no-properties tab-line-left-button))
       (length (substring-no-properties tab-line-right-button))
       (if tab-line-new-button-show
           (length (substring-no-properties tab-line-new-button))
         0)))


  (defun aorst/tab-line--make-pad (tab-width name-width)
    "Generate padding string based on TAB-WIDTH and NAME-WIDTH."
    (let* ((width (- tab-width name-width))
           (padding (/ (if (oddp width) (+ width 1) width) 2)))
      (make-string padding ?\s)))


  (defun aorst/tab-line-name-buffer (buffer &rest _buffers)
    "Create name for tab with padding and truncation.

If buffer name is shorter than `tab-line-tab-max-width' it gets
centered with spaces, otherwise it is truncated, to preserve
equal width for all tabs.  This function also tries to fit as
many tabs in window as possible, so if there are no room for tabs
with maximum width, it calculates new width for each tab and
truncates text if needed.  Minimal width can be set with
`tab-line-tab-min-width' variable."
    (with-current-buffer buffer
      (let* ((amount (length (tab-line-tabs-window-buffers)))
             (width (aorst/tab-line--tab-width
                     (aorst/tab-line--max-width (get-buffer-window buffer))
                     amount))
             (buffer (string-trim (buffer-name)))
             (name-width (length buffer))
             (right-pad (if tab-line-close-button-show "" " "))
             (truncate-width (- width
                                (length tab-line-ellipsis-string)
                                (length right-pad))))
        (if (>= name-width truncate-width)
            (concat  " " (truncate-string-to-width buffer truncate-width) tab-line-ellipsis-string right-pad)
          (let* ((padding (aorst/tab-line--make-pad width name-width))
                 (tab-text (concat padding buffer))
                 (text-width (length tab-text)))
            (concat tab-text (make-string (- width text-width) ?\s)))))))


  (setq tab-line-close-button-show t
        tab-line-new-button-show nil
        tab-line-separator ""
        tab-line-tab-name-function #'aorst/tab-line-name-buffer
        tab-line-right-button (propertize (if (char-displayable-p ?▶) " ▶ " " > ")
                                          'keymap tab-line-right-map
                                          'mouse-face 'tab-line-highlight
                                          'help-echo "Click to scroll right")
        tab-line-left-button (propertize (if (char-displayable-p ?◀) " ◀ " " < ")
                                         'keymap tab-line-left-map
                                         'mouse-face 'tab-line-highlight
                                         'help-echo "Click to scroll left")
        tab-line-close-button (propertize (if (char-displayable-p ?×) " × " " x ")
                                          'keymap tab-line-tab-close-map
                                          'mouse-face 'tab-line-close-highlight
                                          'help-echo "Click to close tab")
        tab-line-exclude-modes '(ediff-mode
                                 process-menu-mode
                                 term-mode
                                 vterm-mode))


  (let ((bg (if (facep 'solaire-default-face)
                (face-attribute 'solaire-default-face :background)
              (face-attribute 'default :background)))
        (fg (face-attribute 'default :foreground))
        (dark-fg (face-attribute 'shadow :foreground))
        (base (if (facep 'solaire-default-face)
                  (face-attribute 'default :background)
                (face-attribute 'mode-line :background)))
        (box-width (/ (line-pixel-height) 2)))
    (set-face-attribute 'tab-line nil
                        :background base
                        :foreground dark-fg
                        :height 1.0
                        :inherit nil
                        :box (when (> box-width 0) (list :line-width -1 :color base)))
    (set-face-attribute 'tab-line-tab nil
                        :foreground dark-fg
                        :background bg
                        :weight 'normal
                        :inherit nil
                        :box (when (> box-width 0) (list :line-width box-width :color bg)))
    (set-face-attribute 'tab-line-tab-inactive nil
                        :foreground dark-fg
                        :background base
                        :weight 'normal
                        :inherit nil
                        :box (when (> box-width 0) (list :line-width box-width :color base)))
    (set-face-attribute 'tab-line-tab-current nil
                        :foreground fg
                        :background bg
                        :weight 'bold
                        :inherit nil
                        :box (when (> box-width 0) (list :line-width box-width :color bg))))

  (defun aorst/tab-line-drop-caches ()
    "Drops `tab-line' cache in every window."
    (dolist (window (window-list))
      (set-window-parameter window 'tab-line-cache nil)))

  (add-hook 'window-configuration-change-hook #'aorst/tab-line-drop-caches))

(use-package display-line-numbers
  :straight nil
  :custom
  (display-line-numbers-grow-only t)
  (display-line-numbers-width-start t))

(use-package org
  :straight (:type built-in)
  :hook ((org-mode . auto-fill-mode)
         (after-save . aorst/org-tangle-on-config-save)
         (org-babel-after-execute . aorst/org-update-inline-images)
         (ediff-prepare-buffer . outline-show-all)
         ((org-capture-mode org-src-mode) . aorst/discard-history))
  :bind (("C-c a" . org-agenda)
         :map org-mode-map
         ("C-c l" . org-store-link))
  :custom
  (org-startup-with-inline-images nil)
  (org-tags-column -100)
  (org-startup-folded 'content)
  (org-hide-emphasis-markers t)
  (org-adapt-indentation nil)
  (org-hide-leading-stars t)
  (org-highlight-latex-and-related '(latex))
  (revert-without-query '(".*\.pdf"))
  (org-preview-latex-default-process 'dvisvgm)
  (org-src-fontify-natively t)
  (org-preview-latex-image-directory ".ltximg/")
  (org-latex-listings 'minted)
  (org-latex-pdf-process '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
                          ("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
                          ("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  (org-confirm-babel-evaluate nil)
  (org-imenu-depth 8)
  (org-log-done t)
  (org-agenda-files '("~/Tasks"))
  :config
  (when (executable-find "gsettings")
    (let ((font-scaling (string-to-number
                         (shell-command-to-string "gsettings get org.gnome.desktop.interface text-scaling-factor"))))
      (setq org-format-latex-options
            (plist-put org-format-latex-options :scale font-scaling))))
  (use-package ox-latex
    :straight nil)
  (use-package ox-hugo
    :after ox)
  (when (not (version<= org-version "9.1.9"))
    (use-package org-tempo
      :straight nil))
  (font-lock-add-keywords 'org-mode
                        '(("^ *\\([-+]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (defun aorst/org-tangle-on-config-save ()
    "Tangle source code blocks when configuration file is saved."
    (when (string= buffer-file-name (file-truename (concat user-emacs-directory "README.org")))
      (org-babel-tangle)))
  (defun aorst/org-update-inline-images ()
    "Update inline images in Org-mode."
    (interactive)
    (when org-inline-image-overlays
      (org-redisplay-inline-images)))
  (defun aorst/discard-history ()
    "Discard undo history of org src and capture blocks."
    (setq buffer-undo-list nil)
    (set-buffer-modified-p nil))
  (defvar minted-cache-dir
    (file-name-as-directory
     (expand-file-name ".minted/\\jobname"
                       temporary-file-directory)))
  (add-to-list 'org-latex-packages-alist
               `(,(concat "cachedir=" minted-cache-dir)
                 "minted" nil))
  (add-to-list 'org-latex-logfiles-extensions "tex")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((gnuplot . t)
     (scheme . t)))
  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass{article}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  (defun aorst/org-update-latex-preview-background-color (&rest _)
    (setq-default
     org-format-latex-options
     (plist-put org-format-latex-options
                :background
                (face-attribute (or (cadr (assq 'default face-remapping-alist))
                                    'default)
                                :background nil t))))
  (add-hook 'solaire-mode-hook #'aorst/org-update-latex-preview-background-color))

(use-package prog-mode
  :straight nil
  :hook ((prog-mode . show-paren-mode)
         (prog-mode . display-line-numbers-mode)))

(use-package cc-mode
  :straight nil
  :config (defun aorst/cc-mode-setup ()
            (c-set-offset 'case-label '+)
            (setq c-basic-offset 4
                  c-default-style "linux"
                  indent-tabs-mode t
                  comment-start "//"
                  comment-end ""
                  tab-width 4))
  :hook ((c-mode-common . aorst/cc-mode-setup)
         (c-mode-common . electric-pair-local-mode)))

(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :config
  (defvar markdown-command "multimarkdown")
  (defun aorst/markdown-setup ()
    "Set buffer local variables."
    (setq fill-column 80
          default-justification 'left))
  :hook ((markdown-mode . flyspell-mode)
         (markdown-mode . auto-fill-mode)
         (markdown-mode . aorst/markdown-setup)))

(use-package rust-mode
  :commands (rust-format-buffer)
  :hook (rust-mode . electric-pair-local-mode)
  :bind (:map rust-mode-map
         ("C-c C-M-f" . rust-format-buffer)))

(use-package racer
  :if (executable-find "racer")
  :hook (racer-mode . eldoc-mode)
  :init (defun org-babel-edit-prep:rust (&optional _babel-info)
          "Run racer mode for Org Babel."
          (racer-mode 1)))

(use-package cargo
  :if (executable-find "cargo")
  :hook ((rust-mode toml-mode) . cargo-minor-mode))

(use-package toml-mode
  :bind (:map toml-mode-map
         ("C-c C-M-f" . aorst/indent-buffer)))

(use-package geiser
  :hook (scheme-mode . geiser-mode)
  :custom
  (geiser-active-implementations '(guile))
  (geiser-default-implementation 'guile))

(use-package racket-mode
  :hook (racket-repl-mode . electric-pair-local-mode)
  :bind (:map racket-mode-map
         ("C-c C-d" . racket-run-with-debugging)
         ("C-c C-M-f" . aorst/indent-buffer)
         (")" . self-insert-command)
         ("]" . self-insert-command)
         ("}" . self-insert-command))
  :config
  (set-face-attribute 'racket-debug-break-face nil :background (face-attribute 'error :foreground) :foreground (face-attribute 'default :background))
  (set-face-attribute 'racket-debug-result-face nil :foreground (face-attribute 'font-lock-comment-face :foreground) :box nil)
  (set-face-attribute 'racket-debug-locals-face nil :foreground (face-attribute 'font-lock-comment-face :foreground) :box nil)
  (set-face-attribute 'racket-selfeval-face nil :foreground (face-attribute 'default :foreground)))

(use-package cmake-mode
  :bind (:map cmake-mode-map
         ("C-c C-M-f" . aorst/indent-buffer)))

(use-package elisp-mode
  :straight nil
  :commands (aorst/emacs-lisp-indent-function)
  :hook ((emacs-lisp-mode . eldoc-mode)
         (emacs-lisp-mode . (lambda ()
                              (setq-local lisp-indent-function
                                          #'aorst/emacs-lisp-indent-function))))
  :bind (:map emacs-lisp-mode-map
         ("C-c C-M-f" . aorst/indent-buffer))
  :config
  (defun aorst/emacs-lisp-indent-function (indent-point state)
    "A replacement for `lisp-indent-function'.
Indents plists more sensibly. Adapted from DOOM Emacs:
https://github.com/hlissner/doom-emacs/commit/a634e2c8125ed692bb76b2105625fe902b637998"
    (let ((normal-indent (current-column))
          (orig-point (point)))
      (goto-char (1+ (elt state 1)))
      (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
      (cond ((and (elt state 2)
                  (or (not (looking-at-p "\\sw\\|\\s_"))
                      (eq (char-after) ?:)))
             (unless (> (save-excursion (forward-line 1) (point))
                        calculate-lisp-indent-last-sexp)
               (goto-char calculate-lisp-indent-last-sexp)
               (beginning-of-line)
               (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t))
             (backward-prefix-chars)
             (current-column))
            ((and (save-excursion
                    (goto-char indent-point)
                    (skip-syntax-forward " ")
                    (not (eq (char-after) ?:)))
                  (save-excursion
                    (goto-char orig-point)
                    (eq (char-after) ?:)))
             (save-excursion
               (goto-char (+ 2 (elt state 1)))
               (current-column)))
            ((let* ((function (buffer-substring (point) (progn (forward-sexp 1) (point))))
                    (method (or (function-get (intern-soft function) 'lisp-indent-function)
                                (get (intern-soft function) 'lisp-indent-hook))))
               (cond ((or (eq method 'defun)
                          (and (null method)
                               (> (length function) 3)
                               (string-match-p "\\`def" function)))
                      (lisp-indent-defform state indent-point))
                     ((integerp method)
                      (lisp-indent-specform method state
                                            indent-point normal-indent))
                     (method
                      (funcall method indent-point state)))))))))

(use-package yaml-mode)

(use-package sh-script
  :straight nil
  :bind (:map sh-mode-map
         ("C-c C-M-f" . aorst/indent-buffer)))

(use-package perl-mode
  :straight nil
  :hook ((perl-mode . electric-pair-local-mode)
         (perl-mode . flycheck-mode))
  :bind (:map perl-mode-map
         ("C-c C-M-f" . aorst/indent-buffer)))

(use-package clojure-mode
  :hook (((clojure-mode clojurescript-mode) . flycheck-mode))
  :bind (:map clojure-mode-map
         ("C-c C-M-f" . aorst/indent-buffer)
         ("C-x C-M-;" . aorst/clojure-toggle-ignore-form))
  :config
  (defun aorst/clojure-toggle-ignore-form ()
    "Add or remove #_ literal before the current form."
    (interactive)
    (save-excursion
      (condition-case nil
          (progn
            (backward-up-list)
            (if (looking-back "#_")
                (delete-char -2)
              (insert "#_")))
        (scan-error
         (progn
           (forward-sexp)
           (if (looking-back "#_")
               (delete-char -2)
             (backward-sexp)
             (insert "#_"))))))))

(use-package cider
  :hook (((cider-repl-mode cider-mode) . cider-company-enable-fuzzy-completion)
         ((cider-repl-mode cider-mode) . eldoc-mode)
         (cider-disconnected . (lambda () (ignore-errors (delete-window)))))
  :custom-face
  (cider-error-highlight-face ((t (:inherit flymake-error))))
  (cider-fringe-face ((t (:inherit flymake-warning))))
  (cider-fragile-button-face ((t (:box (:line-width -1
                                        :color nil
                                        :style nil)
                                  :inherit (font-lock-warning-face)))))
  (cider-deprecated-face ((t (:inherit smerge-upper))))
  (cider-instrumented-face ((t (:box (:line-width -1
                                      :color "#ff6c6b"
                                      :style nil)))))
  (cider-fringe-good-face ((t (:inherit cider-repl-stdout-face))))
  :custom
  (nrepl-log-messages nil)
  (cider-repl-display-help-banner nil)
  (cider-repl-tab-command #'company-complete-common-or-cycle)
  (nrepl-hide-special-buffers t)
  :config
  (setq cider-jdk-src-paths nil)
  (when (file-exists-p "/usr/lib/jvm/java-1.8.0-openjdk/src.zip")
    (add-to-list 'cider-jdk-src-paths "/usr/lib/jvm/java-1.8.0-openjdk/src.zip"))
  (when (file-exists-p "/usr/lib/jvm/java-11-openjdk/lib/src.zip")
    (add-to-list 'cider-jdk-src-paths "/usr/lib/jvm/java-11-openjdk/lib/src.zip")))

(use-package flycheck-clj-kondo
  :if (executable-find "clj-kondo")
  :straight (:host github
             :repo "borkdude/flycheck-clj-kondo"))

(use-package clj-refactor
  :hook ((cider-mode . clj-refactor-mode)
         (cider-mode . yas-minor-mode))
  :bind (:map cider-mode-map
         ("C-c C-r" . hydrant/clj-refactor-menu/body))
  :config
  (when (fboundp #'defhydra)
    (defhydra hydrant/clj-refactor-menu (:color blue :hint nil)
      "
 ^Add^                     ^Extract^       ^Clean^          ^Rename^      ^Unwind^
 _ad_: declaration         _ec_: constant  _cp_: project    _rs_: symbol  _ua_: unwind all
 _ai_: import to ns        _ed_: def       _cn_: namespace  _rf_: file    _uw_: unwind
 _am_: missing-libspec     _ef_: function  ^  ^             ^  ^          ^  ^
 _ap_: project-dependency  ^  ^            ^  ^             ^  ^          ^  ^
 _au_: use-to-ns           ^Expand^        ^Cycle^          ^Remove^      ^Update^
 _ar_: require-to-n        _el_: let       _ci_: if         _rl_: let     _ud_: dependencies
 _as_: stubs               ^  ^            _cp_: privacy
 ^  ^                      ^  ^            ^  ^             ^Require^     ^Hotload^
 ^  ^                      ^  ^            ^  ^             _rm_: macro   _hd_: dependency

 ^Uncategorized^            ^Misc^                      ^Thread^
 _pf_: promote fn           _q_:  exit                  _tf_: thread first all
 _mf_: move form            _?_:  describe refactoring  _th_: thread
 _ml_: move to let          _sc_: show changelog        _tl_: thread last all
 _il_: introduce let        _sp_: sort project deps     _ct_: cycle thread
 _is_: inline symbol        _sr_: stop referring        ^  ^
 _fe_: fn from example
 _fu_: find usages
 _dk_: destructure keys
 _cs_: change fn signature
"
      ("pf" cljr-promote-function)
      ("mf" cljr-move-form)
      ("ml" cljr-move-to-let)
      ("il" cljr-introduce-let)
      ("is" cljr-inline-symbol)
      ("fe" cljr-create-fn-from-example)
      ("fu" cljr-find-usages)
      ("dk" cljr-destructure-keys)
      ("cs" cljr-change-function-signature)
      ("?"  cljr-describe-refactoring)
      ("q"  ignore :exit t)
      ("cp" cljr-project-clean)
      ("cn" cljr-clean-ns)
      ("ad" cljr-add-declaration)
      ("ai" cljr-add-import-to-ns)
      ("am" cljr-add-missing-libspec)
      ("ap" cljr-add-project-dependency)
      ("ar" cljr-add-require-to-ns)
      ("as" cljr-add-stubs)
      ("au" cljr-add-use-to-ns)
      ("ec" cljr-extract-constant)
      ("ed" cljr-extract-def)
      ("ef" cljr-extract-function)
      ("el" cljr-expand-let)
      ("hd" cljr-hotload-dependency)
      ("ua" clojure-unwind-all)
      ("ud" cljr-update-project-dependencies)
      ("uw" clojure-unwind)
      ("tf" clojure-thread-first-all)
      ("th" clojure-thread)
      ("tl" clojure-thread-last-all)
      ("sc" cljr-show-changelog)
      ("sp" cljr-sort-project-dependencies)
      ("sr" cljr-stop-referring)
      ("ci" clojure-cycle-if)
      ("cp" clojure-cycle-privacy)
      ("ct" cljr-cycle-thread)
      ("rf" cljr-rename-file-or-dir)
      ("rl" cljr-remove-let)
      ("rm" cljr-require-macro)
      ("rs" cljr-rename-symbol))))

(use-package fennel-mode
  :bind (:map fennel-mode-map
         ("C-c C-M-f" . aorst/indent-buffer)))

(use-package lua-mode
  :bind (:map lua-mode-map
         ("C-c C-M-f" . aorst/indent-buffer)))

(use-package css-mode
  :straight nil
  :custom
  (css-indent-offset 2))

(use-package lsp-java)

(use-package help
  :straight nil
  :custom (help-window-select t))

(use-package doc-view
  :straight nil
  :custom (doc-view-resolution 192))

(setq use-package-hook-name-suffix "-functions")
(use-package vterm
  :if (bound-and-true-p module-file-suffix)
  :bind (("C-`" . aorst/vterm-toggle)
         ("C-t" . aorst/vterm-focus))
  :hook (vterm-exit . aorst/kill-vterm)
  :config
  (defun aorst/vterm-toggle (&optional arg)
    "Toggle `vterm' window on and off with the same command."
    (interactive "P")
    (let* ((directory (if default-directory
                          default-directory
                        (expand-file-name "~/")))
           (bufname "*vterm*")
           (window (get-buffer-window bufname)))
      (if window
          (ignore-errors (delete-window window))
        (if (window-dedicated-p)
            (let ((windows (seq-drop-while #'window-dedicated-p (window-list))))
              (when (not (null windows))
                (select-window (car windows)))))
        (let* ((win-side (if (symbolp arg)
                             (cons (split-window-below) 'bot)
                           (cons (split-window-right) 'right)))
               (window (car win-side))
               (side (cdr win-side)))
          (select-window window)
          (cond ((get-buffer bufname)
                 (switch-to-buffer bufname))
                (t (let ((default-directory directory))
                     (vterm bufname))))
          (when (bound-and-true-p global-tab-line-mode)
            (setq tab-line-format nil))
          (set-window-dedicated-p window t)
          (set-window-parameter window 'no-delete-other-windows t)
          (set-window-parameter window 'window-side side)
          (set-window-parameter window 'no-other-window t)))))
  (defun aorst/vterm-focus (&optional arg)
    "Focus `vterm' or open one if there's none."
    (interactive "P")
    (let ((window (get-buffer-window "*vterm*")))
      (if window
          (select-window window)
        (aorst/vterm-toggle arg))))
  (defun aorst/kill-vterm (buf &optional event)
    "Kill the `*vterm*' buffer after shell exits."
    (when buf (kill-buffer buf))))
(setq use-package-hook-name-suffix "-hook")

(use-package editorconfig
  :config (editorconfig-mode 1))

(use-package flycheck
  :bind (:map flycheck-mode-map
         ("C-c ! C-h" . hydrant/flycheck/body))
  :custom
  (flycheck-indication-mode 'right-fringe)
  :config
  (when (fboundp #'define-fringe-bitmap)
    (define-fringe-bitmap 'flycheck-double-exclamation-mark
      (vector #b00000000
              #b00000000
              #b00000000
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b01100110
              #b00000000
              #b01100110
              #b01100110
              #b00000000
              #b00000000
              #b00000000))
    (define-fringe-bitmap 'flycheck-exclamation-mark
      (vector #b00000000
              #b00000000
              #b00000000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00011000
              #b00000000
              #b00011000
              #b00011000
              #b00000000
              #b00000000
              #b00000000))
    (define-fringe-bitmap 'flycheck-question-mark
      (vector #b00000000
              #b00000000
              #b00000000
              #b00111100
              #b01111110
              #b01100110
              #b01100110
              #b00000110
              #b00001100
              #b00011000
              #b00011000
              #b00000000
              #b00011000
              #b00011000
              #b00000000
              #b00000000
              #b00000000))
    (flycheck-define-error-level 'error
      :severity 100
      :compilation-level 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-double-exclamation-mark
      :fringe-face 'flycheck-fringe-error
      :error-list-face 'flycheck-error-list-error)
    (flycheck-define-error-level 'warning
      :severity 100
      :compilation-level 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-exclamation-mark
      :fringe-face 'flycheck-fringe-warning
      :error-list-face 'flycheck-error-list-warning)
    (flycheck-define-error-level 'info
      :severity 100
      :compilation-level 0
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'flycheck-question-mark
      :fringe-face 'flycheck-fringe-info
      :error-list-face 'flycheck-error-list-info))
  (when (fboundp #'defhydra)
    (defhydra hydrant/flycheck (:color blue :hint nil)
      "
 ^Flycheck^         ^Errors^       ^Checker^
 _q_: quit          _<_: previous  _?_: describe
 _M_: manual        _>_: next      _d_: disable
 _v_: verify setup  _f_: check     _m_: mode
 ^ ^                _l_: list      _s_: select"
      ("q" ignore :exit t)
      ("M" flycheck-manual)
      ("v" flycheck-verify-setup)
      ("<" flycheck-previous-error :color pink)
      (">" flycheck-next-error :color pink)
      ("f" flycheck-buffer)
      ("l" flycheck-list-errors)
      ("?" flycheck-describe-checker)
      ("d" flycheck-disable-checker)
      ("m" flycheck-mode)
      ("s" flycheck-select-checker))))

(use-package flycheck-cask
  :hook (flycheck-mode . flycheck-cask-setup))

(use-package hydra)

(use-package parinfer-rust-mode
  :if (and (bound-and-true-p module-file-suffix)
           (not (string-match-p "aarch" system-configuration)))
  :straight (:host github
             :repo "justinbarclay/parinfer-rust-mode"
             :branch "master")
  :hook ((clojure-mode
          emacs-lisp-mode
          common-lisp-mode
          scheme-mode
          lisp-mode
          racket-mode
          fennel-mode) . parinfer-rust-mode)
  :custom (parinfer-rust-check-before-enable 'defer)
  :config
  (add-to-list 'parinfer-rust-treat-command-as '(aorst/indent-buffer . "indent"))
  :init
  (setq parinfer-rust-auto-download t))

(use-package flx)

(use-package ivy
  :commands ivy-mode
  :hook ((minibuffer-setup . aorst/minibuffer-defer-garbage-collection)
         (minibuffer-exit . aorst/minibuffer-restore-garbage-collection))
  :bind (("C-x b" . ivy-switch-buffer)
         ("C-x C-b" . ivy-switch-buffer))
  :custom
  (ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
  (ivy-count-format "")
  (ivy-ignore-buffers '("\\` " "\\`\\*"))
  (ivy-display-style nil)
  (ivy-minibuffer-faces nil)
  (ivy-minibuffer-faces '(default default default default))
  (ivy-use-virtual-buffers t)
  (enable-recursive-minibuffers t)
  :init
  (defun aorst/minibuffer-defer-garbage-collection ()
    "Defer garbage collection for minibuffer"
    (setq gc-cons-threshold most-positive-fixnum))
  (defun aorst/minibuffer-restore-garbage-collection ()
    "Resotre garbage collection settings."
    (run-at-time
     1 nil (lambda () (setq gc-cons-threshold aorst--gc-cons-threshold))))
  (ivy-mode 1))

(use-package counsel
  :commands (counsel-M-x
             counsel-find-file
             counsel-file-jump
             counsel-recentf
             counsel-rg
             counsel-describe-function
             counsel-describe-variable
             counsel-find-library)
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-x f" . counsel-file-jump)
         ("C-x C-r" . counsel-recentf)
         ("C-x d" . counsel-dired)
         ("C-h f" . counsel-describe-function)
         ("C-h C-f" . counsel-describe-face)
         ("C-h v" . counsel-describe-variable)
         ("C-h l" . counsel-find-library))
  :config
  (when (executable-find "fd")
    (define-advice counsel-file-jump (:around (foo &optional initial-input initial-directory))
      (let ((find-program "fd")
            (counsel-file-jump-args (split-string "-L --type f --hidden")))
        (funcall foo))))
  (when (executable-find "rg")
    (setq counsel-rg-base-command
          "rg -S --no-heading --hidden --line-number --color never %s .")))

(use-package company
  :bind (:map company-active-map
         ("TAB" . company-complete-common-or-cycle)
         ("<tab>" . company-complete-common-or-cycle)
         ("<S-Tab>" . company-select-previous)
         ("<backtab>" . company-select-previous)
         ("C-n" . company-select-next)
         ("C-p" . company-select-previous))
  :hook (after-init . global-company-mode)
  :custom
  (company-require-match 'never)
  (company-minimum-prefix-length 2)
  (company-tooltip-align-annotations t)
  (company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                       company-preview-frontend
                       company-echo-metadata-frontend))
  (company-backends '(company-capf company-files))
  (company-tooltip-minimum-width 30)
  (company-tooltip-maximum-width 60))

(use-package company-posframe
  :after company
  :custom
  (company-posframe-quickhelp-show-header nil)
  (company-posframe-show-indicator nil)
  (company-posframe-show-metadata nil)
  (company-posframe-quickhelp-show-params
   (list :poshandler #'company-posframe-quickhelp-right-poshandler
         :internal-border-width 1
         :timeout 60
         :internal-border-color (face-attribute 'mode-line-inactive :background)
         :no-properties nil
         :poshandler nil))
  :config
  (company-posframe-mode))

(use-package undo-tree
  :commands global-undo-tree-mode
  :bind (("C-z" . undo-tree-undo)
         ("C-S-z" . undo-tree-redo))
  :init (global-undo-tree-mode 1))

(use-package yasnippet
  :config
  (add-to-list 'yas-key-syntaxes 'yas-shortest-key-until-whitespace))

(use-package magit
  :hook ((git-commit-mode . flyspell-mode))
  :bind (("<f12>" . magit-status))
  :custom (magit-ediff-dwim-show-on-hunks t))

(use-package ediff
  :straight nil
  :hook ((ediff-before-setup . aorst/store-pre-ediff-winconfig)
         (ediff-quit . aorst/restore-pre-ediff-winconfig)
         (ediff-keymap-setup . aorst/ediff-setup-keys))
  :config
  (advice-add 'ediff-window-display-p :override #'ignore)
  :custom
  (ediff-split-window-function 'split-window-horizontally)
  :init
  (defvar aorst--ediff-last-windows nil
    "Stores window configuration before `ediff' was invoked.")
  (defun aorst/store-pre-ediff-winconfig ()
    (setq aorst--ediff-last-windows (current-window-configuration)))
  (defun aorst/restore-pre-ediff-winconfig ()
    (set-window-configuration aorst--ediff-last-windows))
  (defun aorst/ediff-copy-both-to-C ()
    (interactive)
    (ediff-copy-diff ediff-current-difference nil 'C nil
                     (concat
                      (ediff-get-region-contents ediff-current-difference 'A ediff-control-buffer)
                      (ediff-get-region-contents ediff-current-difference 'B ediff-control-buffer))))
  (defun aorst/ediff-setup-keys ()
    (define-key ediff-mode-map "d" #'aorst/ediff-copy-both-to-C)))

(use-package phi-search)
(use-package mc-extras)
(use-package multiple-cursors
  :commands (mc/cycle-backward
             mc/cycle-forward)
  :bind (("S-<mouse-1>" . mc/add-cursor-on-click)
         ("C-c m" . hydrant/mc/body)
         :map mc/keymap
         ("<return>" . nil)
         ("C-s" . phi-search)
         ("C-r" . phi-search-backward))
  :config
  (when (fboundp #'defhydra)
    (defhydra hydrant/mc (:hint nil :color pink)
      "
 ^Select^                 ^Discard^                      ^Edit^               ^Navigate^
 _M-s_: split lines       _M-SPC_:  discard current      _&_: align           _(_: cycle backward
 _s_:   select regexp     _b_:      discard blank lines  _#_: insert numbers  _)_: cycle forward
 _n_:   select next       _d_:      remove duplicated    ^ ^                  ^ ^
 _p_:   select previous   _q_ or _g_: exit hydrant       ^ ^                  ^ ^
 _C_:   select next line  _G_:      exit mc mode"
      ("M-s" mc/edit-ends-of-lines)
      ("s" mc/mark-all-in-region-regexp)
      ("n" mc/mark-next-like-this-word)
      ("p" mc/mark-previous-like-this-word)
      ("&" mc/vertical-align-with-space)
      ("(" mc/cycle-backward)
      (")" mc/cycle-forward)
      ("M-SPC" mc/remove-current-cursor)
      ("b" mc/remove-cursors-on-blank-lines)
      ("d" mc/remove-duplicated-cursors)
      ("C" mc/mark-next-lines)
      ("#" mc/insert-numbers)
      ("q" mc/remove-duplicated-cursors :exit t)
      ("g" mc/remove-duplicated-cursors :exit t)
      ("G" mc/keyboard-quit :exit t))))

(use-package expand-region
  :bind (("C-c e" . hydrant/er/body))
  :config
  (when (fboundp #'defhydra)
    (defhydra hydrant/er (:color pink :hint nil)
      "
 ^Expand/Discard^                ^Mark^
 _e_ or _+_: expand region         _(_:      inside pairs
 _r_ or _-_: reduce region         _)_:      around pairs
 _g_:      exit hydrant          _q_ or _'_: inside quotes
 _G_:      discard region, exit  _Q_ or _\"_: around quotes
 ^ ^    ^ ^                        _p_:      paragraph"
      ("e" er/expand-region)
      ("+" er/expand-region)
      ("r" er/contract-region)
      ("-" er/contract-region)
      ("p" er/mark-paragraph)
      ("(" er/mark-inside-pairs)
      (")" er/mark-outside-pairs)
      ("q" er/mark-inside-quotes)
      ("'" er/mark-inside-quotes)
      ("Q" er/mark-outside-quotes)
      ("\"" er/mark-outside-quotes)
      ("g" ignore :exit t)
      ("G" (lambda () (interactive) (deactivate-mark)) :exit t))))

(use-package iedit
  :bind (("M-n" . aorst/iedit-current-or-expand)
         ("C-c i" . aorst/iedit-hydrant))
  :custom
  (iedit-toggle-key-default nil)
  :init
  (defun aorst/iedit-to-mc-hydrant ()
    "Calls `iedit-to-mc-mode' and opens hydra for multiple cursors."
    (interactive)
    (iedit-switch-to-mc-mode)
    (hydrant/mc/body))
  (defun aorst/iedit-current-or-expand (&optional arg)
    "Select only currnent occurrence with `iedit-mode'.  Expand to
  next occurrence if `iedit-mode' is already active."
    (interactive "P")
    (if (bound-and-true-p iedit-mode)
        (if (symbolp arg)
            (iedit-expand-down-to-occurrence)
          (iedit-expand-up-to-occurrence))
      (iedit-mode 1)))
  (when (fboundp #'defhydra)
    (defhydra hydrant/iedit (:hint nil :color pink)
      "
 ^Select^                  ^Discard^                   ^Edit^               ^Navigate^
 _n_: next occurrence      _M-SPC_:  toggle selection  _u_: uppercase       _(_: previous selection
 _p_: previous occurrence  _q_ or _g_: exit hydrant      _d_: downcase        _)_: next selection
 ^ ^                       _G_:      exit iedit-mode   _#_: insert numbers
 ^ ^                       _m_:      switch to mc"
      ("n" iedit-expand-down-to-occurrence)
      ("m" aorst/iedit-to-mc-hydrant :exit t)
      ("p" iedit-expand-up-to-occurrence)
      ("u" iedit-upcase-occurrences)
      ("d" iedit-downcase-occurrences)
      ("#" iedit-number-occurrences)
      ("(" iedit-prev-occurrence)
      (")" iedit-next-occurrence)
      ("M-SPC" iedit-toggle-selection)
      ("q" ignore :exit t)
      ("g" ignore :exit t)
      ("G" (lambda () (interactive) (iedit-mode -1)) :exit t))
    (defun aorst/iedit-hydrant ()
      "toggle iedit mode for item under point, and open `hydrant/iedit'."
      (interactive)
      (ignore-errors
        (iedit-mode 1)
        (hydrant/iedit/body)))))

(use-package lsp-mode
  :hook (((rust-mode c-mode c++-mode java-mode) . lsp)
         (lsp-mode . yas-minor-mode))
  :custom-face
  (lsp-modeline-code-actions-face ((t (:inherit mode-line))))
  :custom
  (lsp-enable-links nil)
  (lsp-keymap-prefix "C-c l")
  (lsp-rust-clippy-preference "on")
  (lsp-prefer-capf t)
  (lsp-enable-indentation nil)
  (lsp-enable-symbol-highlighting nil)
  (lsp-rust-server 'rust-analyzer)
  (lsp-session-file (expand-file-name "lsp-session" user-emacs-directory)))

(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode
  :bind (:map lsp-ui-mode-map
         ("M-." . lsp-ui-peek-find-definitions)
         ("M-/" . lsp-ui-peek-find-references))
  :custom
  (lsp-ui-doc-border (face-attribute 'mode-line-inactive :background))
  (lsp-ui-sideline-enable nil)
  (lsp-ui-imenu-enable nil)
  (lsp-ui-doc-delay 1 "higher than eldoc delay")
  :config
  (when (fboundp #'aorst/escape)
    (define-advice lsp-ui-doc--make-request (:around (foo))
      (unless (eq this-command 'aorst/escape)
        (funcall foo))))
  (lsp-ui-mode))

(use-package dap-mode)

(use-package project
  :straight nil
  :bind (("C-c p f" . project-find-file)
         ("C-c p r" . project-find-regexp))
  :config
  (defvar project-root-markers '("Cargo.toml" "compile_commands.json" "compile_flags.txt")
    "Files or directories that indicate the root of a project.")
  (defun aorst/project-find-root (path)
    "Recursive search in PATH for root markers."
    (let* ((this-dir (file-name-as-directory (file-truename path)))
           (parent-dir (expand-file-name (concat this-dir "../")))
           (system-root-dir (expand-file-name "/")))
      (cond
       ((aorst/project-root-p this-dir) (cons 'transient this-dir))
       ((equal system-root-dir this-dir) nil)
       (t (aorst/project-find-root parent-dir)))))
  (defun aorst/project-root-p (path)
    "Check if current PATH has any of project root markers."
    (let ((results (mapcar (lambda (marker)
                             (file-exists-p (concat path marker)))
                           project-root-markers)))
      (eval `(or ,@ results))))
  (add-to-list 'project-find-functions #'aorst/project-find-root))

(use-package clang-format
  :after cc-mode
  :bind (:map c-mode-base-map
         ("C-c C-M-f" . clang-format-buffer)))

(use-package server
  :straight nil
  :config
  (unless (server-running-p)
    (server-start)))

(use-package hideshow
  :straight nil
  :after transient
  :hook (prog-mode . hs-minor-mode)
  :bind (:map prog-mode-map
         ("<f6>" . hydrant/hideshow-menu/body))
  :config
  (when (fboundp #'defhydra)
    (defhydra hydrant/hideshow-menu (:color pink :hint nil)
      "
 ^Hide^       ^Show^       ^Exit^
 _ha_: all    _sa_: all    _qs_: quit show all
 _hb_: block  _sb_: block  _qh_: quit hide all
 ^  ^         ^  ^         _qq_: quit"
      ("ha" hs-hide-all)
      ("hb" hs-hide-block)
      ("sa" hs-show-all)
      ("sb" hs-show-block)
      ("qq"  ignore :exit t)
      ("qs"  hs-show-all :exit t)
      ("qh"  hs-hide-all :exit t))))

(use-package desktop
  :straight nil
  :if window-system
  :hook ((after-init . aorst/desktop-restore))
  :custom
  (desktop-path `(,user-emacs-directory))
  (desktop-dirname user-emacs-directory)
  (desktop-base-file-name "desktop")
  (desktop-base-lock-name "desktop.lock")
  (desktop-save t)
  (desktop-load-locked-desktop t)
  (desktop-locals-to-save nil)
  (desktop-globals-to-save nil)
  (desktop-restore-frames nil)
  :config
  (dolist (mode '(solaire-mode
                  parinfer-rust-mode))
    (add-to-list 'desktop-minor-mode-table `(,mode ,nil)))
  :init
  (defun aorst/desktop-restore ()
    "Restore a saved emacs session."
    (interactive)
    (desktop-save-mode t)
    (when (file-exists-p
           (concat desktop-dirname desktop-base-file-name))
      (desktop-read))))

(use-package edit-indirect
  :hook ((edit-indirect-after-creation . aorst/edit-indirect-header-line-setup))
  :bind (:map edit-indirect-mode-map
         ("C-c C-c" . edit-indirect-commit)
         ("C-c C-k" . edit-indirect-abort)
         ("C-c '" . nil))
  :init
  (defun aorst/edit-indirect-header-line-setup ()
    (setq-local
     header-line-format
     (substitute-command-keys
      "\\<edit-indirect-mode-map>Edit, then exit with `\\[edit-indirect-commit]' or abort with `\\[edit-indirect-abort]'"))))

(use-package separedit
  :hook (separedit-buffer-creation . aorst/separedit-header-line-setup)
  :bind (:map prog-mode-map
         ("C-c '" . separedit)
         :map edit-indirect-mode-map
         ("C-c '" . separedit))
  :custom
  (separedit-default-mode 'markdown-mode)
  :init
  (defun aorst/separedit-header-line-setup ()
    (setq-local
     header-line-format
     (substitute-command-keys
      "Edit, then exit with `\\[separedit-commit]' or abort with `\\[edit-indirect-abort]'"))))

(use-package recentf
  :straight nil
  :config
  (add-to-list 'recentf-exclude "\\.gpg\\"))

(use-package smooth-scroll
  :config
  (smooth-scroll-mode)
  (setq smooth-scroll/vscroll-step-size 10)
  (setq smooth-scroll/hscroll-step-size 4))

(use-package dumb-jump
  :custom (dumb-jump-prefer-searcher 'rg)
  :config
  (add-to-list 'xref-backend-functions #'dumb-jump-xref-activate))

(provide 'init)
;;; init.el ends here
